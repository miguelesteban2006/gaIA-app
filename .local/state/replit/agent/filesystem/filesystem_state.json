{"file_contents":{"README.md":{"content":"# ElderCompanion - Sistema Inteligente de Monitoreo para Adultos Mayores\n\nElderCompanion es una Progressive Web Application (PWA) dise√±ada para el monitoreo y cuidado de adultos mayores a trav√©s de un sistema integrado que conecta familias, profesionales m√©dicos y asistentes rob√≥ticos.\n\n## üöÄ Caracter√≠sticas Principales\n\n- **An√°lisis de Sentimientos**: Monitoreo emocional en tiempo real\n- **Seguimiento de Salud**: Indicadores vitales y bienestar\n- **Red de Apoyo**: Conecta familias, m√©dicos y cuidadores\n- **Interfaz Intuitiva**: Dise√±o accesible y f√°cil de usar\n- **PWA**: Funciona como aplicaci√≥n nativa\n\n## üõ†Ô∏è Tecnolog√≠as\n\n### Frontend\n- React 18 + TypeScript\n- Vite (build tool)\n- Tailwind CSS + Shadcn/ui\n- TanStack Query (React Query)\n- Wouter (routing)\n\n### Backend\n- Node.js + Express\n- PostgreSQL + Drizzle ORM\n- JWT Authentication\n- Bcrypt (password hashing)\n\n## üì¶ Instalaci√≥n\n\n1. Clona el repositorio\n2. Instala las dependencias:\n   ```bash\n   npm install\n   ```\n\n3. Configura las variables de entorno:\n   ```bash\n   cp .env.example .env\n   ```\n   Completa las variables en el archivo `.env`\n\n4. Configura la base de datos:\n   ```bash\n   npm run db:push\n   ```\n\n5. Inicia el servidor de desarrollo:\n   ```bash\n   npm run dev\n   ```\n\n## üöÄ Despliegue en Vercel\n\n### Configuraci√≥n de Variables de Entorno\n\nEn tu panel de Vercel, configura las siguientes variables:\n\n1. **DATABASE_URL**: URL de tu base de datos PostgreSQL\n2. **JWT_SECRET**: Clave secreta para JWT (genera una segura)\n3. **NODE_ENV**: `production`\n\n### Pasos para Desplegar\n\n1. Conecta tu repositorio a Vercel\n2. Configura las variables de entorno\n3. Vercel detectar√° autom√°ticamente la configuraci√≥n desde `vercel.json`\n4. El despliegue se realizar√° autom√°ticamente\n\n### Base de Datos\n\nSe recomienda usar un servicio de PostgreSQL como:\n- **Neon** (recomendado para compatibilidad)\n- **Supabase**\n- **PlanetScale**\n- **Railway**\n\n## üìù Scripts Disponibles\n\n- `npm run dev`: Servidor de desarrollo\n- `npm run build`: Build para producci√≥n\n- `npm run start`: Servidor de producci√≥n local\n- `npm run db:push`: Sincronizar esquema de base de datos\n- `npm run check`: Verificar tipos de TypeScript\n\n## üîí Autenticaci√≥n\n\nEl sistema utiliza JWT (JSON Web Tokens) para la autenticaci√≥n:\n- Registro y login de usuarios\n- Tokens con expiraci√≥n de 7 d√≠as\n- Middleware de autenticaci√≥n para rutas protegidas\n\n## üìä API Endpoints\n\n### Autenticaci√≥n\n- `POST /api/register` - Registro de usuario\n- `POST /api/login` - Inicio de sesi√≥n\n- `GET /api/auth/user` - Obtener usuario actual\n- `GET /api/profile` - Perfil del usuario\n\n### Usuarios Mayores\n- `POST /api/elderly-users` - Crear perfil de adulto mayor\n- `GET /api/elderly-users` - Listar adultos mayores del usuario\n\n### Interacciones\n- `POST /api/interactions` - Registrar interacci√≥n\n- `GET /api/interactions/:elderlyUserId` - Obtener interacciones\n\n### Estad√≠sticas\n- `GET /api/stats/:elderlyUserId` - Estad√≠sticas generales\n- `GET /api/sentiment-data/:elderlyUserId` - Datos de sentimientos\n\n### Alertas de Salud\n- `POST /api/health-alerts` - Crear alerta\n- `GET /api/health-alerts/:elderlyUserId` - Obtener alertas\n- `PUT /api/health-alerts/:alertId/resolve` - Resolver alerta\n\n## üóÑÔ∏è Esquema de Base de Datos\n\nEl proyecto utiliza las siguientes tablas principales:\n- `users` - Usuarios del sistema\n- `elderly_users` - Perfiles de adultos mayores\n- `user_elderly_relations` - Relaciones entre usuarios y adultos mayores\n- `interactions` - Interacciones registradas\n- `health_alerts` - Alertas de salud\n- `sessions` - Sesiones de usuario\n\n## üé® UI/UX\n\n- Dise√±o responsive y mobile-first\n- Tema claro/oscuro\n- Componentes accesibles (Radix UI)\n- Animaciones suaves (Framer Motion)\n- Iconos de Lucide React\n\n## üì± PWA Features\n\n- Instalable como aplicaci√≥n nativa\n- Service Worker para funcionalidad offline\n- Manifest.json configurado\n- Cacheo inteligente de recursos\n\n## ü§ù Contribuir\n\n1. Fork el proyecto\n2. Crea una rama para tu feature (`git checkout -b feature/nueva-caracteristica`)\n3. Commit tus cambios (`git commit -m 'A√±adir nueva caracter√≠stica'`)\n4. Push a la rama (`git push origin feature/nueva-caracteristica`)\n5. Abre un Pull Request\n\n## üìÑ Licencia\n\nEste proyecto est√° bajo la Licencia MIT. Ver el archivo `LICENSE` para m√°s detalles.\n\n## üÜò Soporte\n\nSi tienes problemas o preguntas:\n1. Revisa la documentaci√≥n\n2. Busca en los issues existentes\n3. Crea un nuevo issue si es necesario\n\n---\n\nDesarrollado con ‚ù§Ô∏è para el cuidado integral de adultos mayores.","size_bytes":4567},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ElderCompanion - Proyecto para Adultos Mayores\n\n## Resumen del Proyecto\n\nElderCompanion es una aplicaci√≥n web completa en espa√±ol dise√±ada para el cuidado y monitoreo de adultos mayores. La plataforma incluye autenticaci√≥n segura, gesti√≥n de perfiles, seguimiento de interacciones y alertas de salud.\n\n## Arquitectura del Proyecto\n\n### Frontend (React + TypeScript)\n- **Framework**: React 18.3.1 con TypeScript\n- **Routing**: Wouter para navegaci√≥n SPA  \n- **UI Components**: Radix UI + Tailwind CSS + shadcn/ui\n- **State Management**: TanStack Query v5 para gesti√≥n de estado del servidor\n- **Forms**: React Hook Form con validaci√≥n Zod\n\n### Backend (Express + Node.js)\n- **Runtime**: Node.js 20 con TypeScript\n- **Framework**: Express.js 4.21.2\n- **Database**: PostgreSQL con Drizzle ORM\n- **Authentication**: JWT con bcrypt para hashing de contrase√±as\n- **API**: RESTful API con middleware de autenticaci√≥n\n\n### Base de Datos (PostgreSQL + Drizzle)\n```sql\n- users: Usuarios del sistema (familiares, m√©dicos, cuidadores)\n- elderly_users: Perfiles de adultos mayores\n- user_elderly_relations: Relaciones entre usuarios y adultos mayores\n- interactions: Interacciones registradas con el sistema\n- health_alerts: Alertas de salud y bienestar\n- sessions: Sesiones de usuario\n```\n\n## Estado Actual del Despliegue\n\n### ‚úÖ Funcionando en Replit\n- **Build Status**: ‚úÖ Aplicaci√≥n corriendo exitosamente\n- **Frontend**: ‚úÖ Servido por Vite en desarrollo\n- **Backend**: ‚úÖ Express server corriendo en puerto 5000\n- **Base de Datos**: ‚úÖ PostgreSQL configurada y conectada\n- **Configuraci√≥n**: ‚úÖ Optimizada para Replit √∫nicamente\n\n## Variables de Entorno Requeridas\n\n```env\n# Configuradas autom√°ticamente en Replit\nDATABASE_URL=postgresql://user:password@host:port/database\nPGPORT=5432\nPGUSER=replit\nPGPASSWORD=auto_generated\nPGDATABASE=main\nPGHOST=localhost\n```\n\n## Scripts Disponibles\n\n```bash\nnpm run dev         # Servidor de desarrollo (puerto 5000)\nnpm run build       # Build frontend con Vite\nnpm run start       # Servidor de producci√≥n con tsx\nnpm run check       # Verificaci√≥n TypeScript\nnpm run db:push     # Sincronizar esquema de base de datos\n```\n\n## API Endpoints\n\n### Autenticaci√≥n\n- `POST /api/register` - Registro de usuario\n- `POST /api/login` - Inicio de sesi√≥n  \n- `GET /api/profile` - Perfil del usuario autenticado\n- `GET /api/auth/user` - Informaci√≥n del usuario actual\n\n### Gesti√≥n de Adultos Mayores\n- `POST /api/elderly-users` - Crear perfil de adulto mayor\n- `GET /api/elderly-users` - Listar adultos mayores del usuario\n- `GET /api/elderly-users/:elderlyUserId` - Obtener perfil espec√≠fico con informaci√≥n m√©dica completa\n- `PUT /api/elderly-users/:elderlyUserId` - Actualizar perfil m√©dico (info personal, medicaciones, diagn√≥sticos, etc.)\n\n### Interacciones y Monitoreo\n- `POST /api/interactions` - Registrar nueva interacci√≥n\n- `GET /api/interactions/:elderlyUserId` - Historial de interacciones\n- `GET /api/stats/:elderlyUserId` - Estad√≠sticas generales\n- `GET /api/sentiment/:elderlyUserId` - Datos de an√°lisis de sentimientos\n\n### Alertas de Salud\n- `POST /api/health-alerts` - Crear alerta de salud\n- `GET /api/health-alerts/:elderlyUserId` - Alertas por usuario\n- `PUT /api/health-alerts/:alertId/resolve` - Resolver alerta\n\n## Uso en Replit\n\n### 1. Base de Datos\n- PostgreSQL configurada autom√°ticamente\n- Variables de entorno creadas autom√°ticamente\n- Schema sincronizado con `npm run db:push`\n\n### 2. Desarrollo\n- El workflow \"Start application\" ejecuta `npm run dev`\n- Frontend y backend corren juntos en puerto 5000\n- Hot reload habilitado con Vite\n\n### 3. Estructura del Servidor\n- Express server maneja API y archivos est√°ticos\n- Vite integrado para desarrollo\n- CORS configurado para Replit\n\n## Caracter√≠sticas T√©cnicas\n\n### Seguridad\n- Autenticaci√≥n JWT con expiraci√≥n de 7 d√≠as\n- Contrase√±as hasheadas con bcrypt (10 rounds)\n- Middleware de autenticaci√≥n para rutas protegidas\n- Validaci√≥n de datos con Zod schemas\n\n### Performance\n- Build optimizado con Vite\n- Code splitting autom√°tico\n- Gzip compression habilitada\n- Assets est√°ticos optimizados\n\n### Funcionalidades\n- Registro y autenticaci√≥n de usuarios\n- Gesti√≥n de perfiles de adultos mayores\n- Seguimiento de interacciones y conversaciones\n- An√°lisis de sentimientos y estado de √°nimo\n- Sistema de alertas de salud\n- Dashboard con estad√≠sticas en tiempo real\n- PWA con service worker y manifest\n\n## Recent Changes (Aug 3, 2025)\n\n### OPTIMIZACIONES FINALES PARA FUNCIONAMIENTO M√ìVIL INDEPENDIENTE ‚úÖ (AGOSTO 3, 2025 - 17:53)\n\n- ‚úÖ **Service Worker optimizado**: Cache inteligente con estrategia Cache First para datos del usuario\n- ‚úÖ **Detector de conectividad**: Hook useNetworkStatus para monitoreo en tiempo real\n- ‚úÖ **Indicador de estado de red**: Componente NetworkStatus que informa sobre conectividad\n- ‚úÖ **Funcionamiento offline**: Datos del usuario accesibles sin conexi√≥n a internet\n- ‚úÖ **URLs din√°micas**: Sistema adaptativo para funcionamiento en cualquier dominio\n- ‚úÖ **Build optimizado**: Bundle de producci√≥n listo para deployment independiente\n- ‚úÖ **PWA mejorada**: Manifest actualizado con start_url optimizada para standalone\n\n### SISTEMA DE PERFILES M√âDICOS COMPLETOS IMPLEMENTADO ‚úÖ (AGOSTO 3, 2025 - 17:36)\n\n- ‚úÖ **Diagn√≥sticos relevantes**: Sistema completo para agregar/eliminar diagn√≥sticos m√∫ltiples (demencia, Parkinson, depresi√≥n, etc.)\n- ‚úÖ **Medicaciones actuales**: Formulario detallado con nombre, dosis, horario y notas para cada medicaci√≥n\n- ‚úÖ **Alergias y sensibilidades**: Arrays separados con badges distintivos (rojo para alergias, gris para sensibilidades)\n- ‚úÖ **Movilidad y ayudas t√©cnicas**: Estado de movilidad (independiente, limitada, asistida, silla de ruedas) + lista de ayudas\n- ‚úÖ **Limitaciones sensoriales**: Estados independientes para visi√≥n, audici√≥n y habla con opciones espec√≠ficas\n- ‚úÖ **Instrucciones de cuidado**: Campo de texto libre para rutinas especiales y precauciones\n- ‚úÖ **Interfaz intuitiva**: Modo edici√≥n/visualizaci√≥n, agregado din√°mico con Enter, eliminaci√≥n con X\n- ‚úÖ **Validaci√≥n y actualizaci√≥n**: Backend completamente funcional, todos los campos se guardan correctamente\n- ‚úÖ **Error de fecha corregido**: Problema de validaci√≥n Drizzle-Zod solucionado definitivamente\n\n### MIGRACI√ìN REPLIT AGENT ‚Üí REPLIT COMPLETADA ‚úÖ (AGOSTO 3, 2025 - 16:48)\n\n- ‚úÖ **Dependencias actualizadas**: drizzle-orm y drizzle-zod compatibles\n- ‚úÖ **Base de datos configurada**: PostgreSQL funcionando en Replit\n- ‚úÖ **Schema migrado**: Todas las tablas creadas correctamente\n- ‚úÖ **TypeScript corregido**: Errores de compatibilidad resueltos\n- ‚úÖ **Servidor ejecut√°ndose**: Express corriendo en puerto 5000\n- ‚úÖ **Configuraci√≥n Vercel eliminada completamente**\n- ‚úÖ **Variables de entorno**: .env.example documentado\n\n### MEJORAS POST-MIGRACI√ìN ‚úÖ\n\n- ‚úÖ **Conectividad externa mejorada**: CORS optimizado para deployments externos\n- ‚úÖ **Dependencias Radix UI**: Todas las dependencias faltantes instaladas\n- ‚úÖ **Manejo de errores mejorado**: API requests con timeout y mejor logging\n- ‚úÖ **Configuraci√≥n de entorno**: .env.example documentado para deployments\n- ‚úÖ **Compatibilidad TanStack Query**: Configuraci√≥n actualizada para v5\n\n### CONFIGURACI√ìN PWA PARA M√ìVILES ‚úÖ\n\n- ‚úÖ **Manifest.json**: Configuraci√≥n completa para instalaci√≥n como APK\n- ‚úÖ **Service Worker**: Funcionalidad offline y cach√© inteligente\n- ‚úÖ **Meta tags m√≥viles**: Optimizaci√≥n para iOS/Android\n- ‚úÖ **CSS responsivo**: Estilos optimizados para dispositivos m√≥viles\n- ‚úÖ **Iconos PWA**: SVG escalables para todas las resoluciones\n\n### PERSONALIZACI√ìN GAIA ‚úÖ\n\n- ‚úÖ **Nombre cambiado**: ElderCompanion ‚Üí GaIA\n- ‚úÖ **√çcono personalizado**: Logo morado con figuras de cuidado (actualizado Aug 3, 2025)\n- ‚úÖ **Tema actualizado**: Colores purple/morado en toda la app\n- ‚úÖ **Optimizaci√≥n m√≥vil**: Tama√±os ajustados sin cambiar dise√±o\n- ‚úÖ **Botones t√°ctiles**: Mejor interacci√≥n en dispositivos m√≥viles\n\n### SISTEMA DE PERFILES M√âDICOS COMPLETOS ‚úÖ\n\n- ‚úÖ **Estado de salud**: Campo para estado general y antecedentes m√©dicos\n- ‚úÖ **Diagn√≥sticos relevantes**: Array JSON para m√∫ltiples diagn√≥sticos (demencia, Parkinson, etc.)\n- ‚úÖ **Medicaciones actuales**: Sistema completo con nombre, dosis, horarios y notas\n- ‚úÖ **Alergias y sensibilidades**: Arrays separados para alergias y sensibilidades\n- ‚úÖ **Movilidad**: Estado de movilidad y ayudas t√©cnicas (andador, silla de ruedas, etc.)\n- ‚úÖ **Limitaciones sensoriales**: Estados de visi√≥n, audici√≥n y habla\n- ‚úÖ **Instrucciones de cuidado**: Campo para instrucciones especiales y rutinas\n- ‚úÖ **P√°gina de perfil completa**: Interfaz de edici√≥n con validaci√≥n y manejo de arrays\n- ‚úÖ **API endpoints**: GET/PUT para obtener y actualizar perfiles m√©dicos\n- ‚úÖ **Navegaci√≥n**: Enlaces desde dashboard principal a perfiles individuales\n\n## Estado del Proyecto\n\n**‚úÖ PROYECTO OPTIMIZADO PARA FUNCIONAMIENTO M√ìVIL INDEPENDIENTE (AGOSTO 3, 2025 - 17:52)**\n\n- ‚úÖ **Base de datos PostgreSQL**: Configurada autom√°ticamente y funcionando\n- ‚úÖ **Schema sincronizado**: Todas las tablas creadas con `npm run db:push`\n- ‚úÖ **Servidor funcionando**: Express corriendo en puerto 5000 con Vite\n- ‚úÖ **API endpoints**: Todos funcionando correctamente (auth, usuarios, interacciones)\n- ‚úÖ **Datos de ejemplo**: Usuario Mar√≠a Gonz√°lez con interacciones reales\n- ‚úÖ **PWA m√≥vil mejorada**: URLs absolutas y mejor compatibilidad m√≥vil\n- ‚úÖ **UI corregida**: √Ånimo muestra datos reales en lugar de placeholder \"8\"\n- ‚úÖ **Datos de ejemplo**: Usuario Mar√≠a Gonz√°lez con interacciones reales\n- ‚úÖ **Problemas PWA m√≥vil resueltos**: Login y registro funcionan en m√≥viles\n- ‚úÖ **√çcono actualizado**: Nuevo dise√±o proporcionado por el usuario\n\n### CONFIGURACI√ìN PARA DEPLOYMENT INDEPENDIENTE ‚úÖ\n\n- ‚úÖ **Build de producci√≥n**: Optimizado con Vite y esbuild\n- ‚úÖ **API mejorada**: URLs din√°micas para deployment y desarrollo\n- ‚úÖ **Service Worker actualizado**: Cache inteligente y manejo offline\n- ‚úÖ **Detector de conectividad**: Aviso cuando falta conexi√≥n al servidor\n- ‚úÖ **Health check endpoint**: `/api/health` para verificar servidor\n- ‚úÖ **Configuraci√≥n PWA**: Lista para funcionar independientemente\n\n## ‚ö†Ô∏è INSTRUCCIONES PARA DESPLIEGUE ‚ö†Ô∏è\n\nPara que la aplicaci√≥n PWA funcione independientemente en m√≥viles SIN necesidad de tener Replit abierto:\n\n**PASO 1: Desplegar en Replit Deployments**\n1. Haz clic en el bot√≥n \"Deploy\" en la parte superior de Replit\n2. Selecciona \"Autoscale Deployment\" (recomendado para apps web)\n3. Agrega m√©todo de pago si es necesario\n4. Espera a que el deployment se complete\n\n**PASO 2: Configurar Variables de Entorno**\nEn el deployment, agregar estas variables:\n- `DATABASE_URL`: URL de PostgreSQL (se copiar√° autom√°ticamente)\n- `JWT_SECRET`: Una clave secreta segura\n- `NODE_ENV`: production\n\n**PASO 3: Actualizar URL en PWA**\nUna vez deployado, la app estar√° disponible en `https://tu-proyecto.replit.app`\nLos usuarios pueden instalar la PWA desde esa URL y funcionar√° independientemente.\n\nEl proyecto GaIA ahora est√° configurado para funcionar perfectamente tanto en desarrollo como en producci√≥n deployada.\n\n## User Preferences\n\n- Idioma: Espa√±ol\n- Comunicaci√≥n: Clara y directa, enfoque en soluciones pr√°cticas\n- Documentaci√≥n: Detallada con checkmarks y ejemplos pr√°cticos","size_bytes":11500},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig(async ({ mode }) => {\n  const isProd = mode === \"production\";\n  const plugins = [react()];\n\n  // Solo cargar plugins de Replit en desarrollo\n  if (!isProd) {\n    const { default: runtimeErrorOverlay } = await import(\n      \"@replit/vite-plugin-runtime-error-modal\"\n    );\n    plugins.push(runtimeErrorOverlay());\n\n    if (process.env.REPL_ID) {\n      const { cartographer } = await import(\"@replit/vite-plugin-cartographer\");\n      plugins.push(cartographer());\n    }\n  }\n\n  return {\n    plugins,\n    resolve: {\n      alias: {\n        \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n        \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n        \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n      },\n    },\n    root: path.resolve(import.meta.dirname, \"client\"),\n    build: {\n      // Si tu server sirve ../dist/public, cambia esto por \"dist/public\"\n      outDir: path.resolve(import.meta.dirname, \"server/public\"),\n      emptyOutDir: true,\n    },\n    server: {\n      fs: { strict: true, deny: [\"**/.*\"] },\n    },\n  };\n});\n","size_bytes":1211},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"gaia-jwt-secret-key-2025\";\n\nexport interface AuthRequest extends Request {\n  user?: any;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function generateToken(userId: string): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"7d\" });\n}\n\nexport function verifyToken(token: string): { userId: string } | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as { userId: string };\n  } catch {\n    return null;\n  }\n}\n\nexport const authenticateToken = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  const payload = verifyToken(token);\n  if (!payload) {\n    return res.status(401).json({ message: \"Invalid or expired token\" });\n  }\n\n  try {\n    const user = await storage.getUser(payload.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Authentication error\" });\n  }\n};","size_bytes":1564},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.DATABASE_SSL === 'true' ? { rejectUnauthorized: false } : undefined,\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":471},"server/index.ts":{"content":"// server/index.ts\nimport express, { type Request, type Response, type NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport dotenv from \"dotenv\";\nimport { registerRoutes } from \"./routes\";\nimport { log, setupVite, serveStatic } from \"./vite\";\n\ndotenv.config();\n\nconst app = express();\nconst server = createServer(app);\n\n// 1) Parse JSON bodies\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// 2) CORS + Preflight (OPTIONS) - Updated for better external compatibility\napp.use((req: Request, res: Response, next: NextFunction) => {\n  const origin = req.headers.origin;\n  \n  // Improved CORS handling for external deployments\n  if (origin) {\n    // Allow specific origins in production, all in development\n    const allowedOrigins = process.env.NODE_ENV === 'production' \n      ? [origin] // Add your production domains here\n      : [origin];\n    \n    if (allowedOrigins.includes(origin) || process.env.NODE_ENV !== 'production') {\n      res.setHeader(\"Access-Control-Allow-Origin\", origin);\n      res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    }\n  } else {\n    // Fallback for same-origin requests\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  }\n  \n  res.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS,PATCH\");\n  res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization, Accept, Origin, X-Requested-With\");\n  res.setHeader(\"Access-Control-Max-Age\", \"3600\"); // Cache preflight for 1 hour\n  \n  if (req.method === \"OPTIONS\") {\n    return res.status(204).end();\n  }\n  next();\n});\n\n// 3) Register API routes\nregisterRoutes(app);\n\n// 4) Error handler\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  console.error(err);\n  const status = err.statusCode || 500;\n  res.status(status).json({ message: err.message || \"Internal Server Error\" });\n});\n\n// 5) Setup server for multiple environments\nasync function startServer() {\n  // Configurar Vite y iniciar servidor\n  await setupVite(app, server);\n  const PORT = parseInt(process.env.PORT || \"5000\", 10);\n  const HOST = process.env.HOST || \"0.0.0.0\"; // Allow external connections\n  \n  server.listen(PORT, HOST, () => {\n    log(`Server running on ${HOST}:${PORT}`);\n    log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n    log(`Database: ${process.env.DATABASE_URL ? 'Connected' : 'Not configured'}`);\n  });\n}\n\n// Iniciar servidor\nstartServer().catch(console.error);\n\n","size_bytes":2500},"server/routes.ts":{"content":"// server/routes.ts\nimport express, { type Express, type Request, type Response } from \"express\";\nimport { storage } from \"./storage\";\nimport {\n  authenticateToken,\n  hashPassword,\n  comparePassword,\n  generateToken,\n  type AuthRequest,\n} from \"./auth\";\nimport {\n  insertUserSchema,\n  loginUserSchema,\n  insertElderlyUserSchema,\n  updateElderlyUserSchema,\n  insertInteractionSchema,\n  insertHealthAlertSchema,\n  insertUserElderlyRelationSchema,\n} from \"@shared/schema\";\n// File upload functionality removed for Vercel compatibility\n// Use cloud storage services like Cloudinary or AWS S3 for file uploads\n\nexport function registerRoutes(app: Express) {\n  \n  // Health check endpoint for PWA\n  app.get(\"/api/health\", (req: Request, res: Response) => {\n    res.status(200).json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n  // Registro de usuario\n  app.post(\"/api/register\", async (req: Request, res: Response) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Verificar si el usuario ya existe\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"El email ya est√° registrado\" });\n      }\n\n      // Hash de la contrase√±a\n      const hashedPassword = await hashPassword(userData.password);\n      \n      // Crear el usuario\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      // Generar token\n      const token = generateToken(user.id);\n      \n      // Remover la contrase√±a del objeto de respuesta\n      const { password: _, ...userResponse } = user;\n      \n      res.status(201).json({ token, user: userResponse });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      const message = error instanceof Error ? error.message : \"Error interno del servidor\";\n      res.status(500).json({ \n        message, \n        error: process.env.NODE_ENV === 'development' ? error : undefined \n      });\n    }\n  });\n\n  // Login de usuario\n  app.post(\"/api/login\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = loginUserSchema.parse(req.body);\n      \n      // Buscar usuario por email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Credenciales inv√°lidas\" });\n      }\n\n      // Verificar contrase√±a\n      const validPassword = await comparePassword(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Credenciales inv√°lidas\" });\n      }\n\n      // Generar token\n      const token = generateToken(user.id);\n      \n      // Remover la contrase√±a del objeto de respuesta\n      const { password: _, ...userResponse } = user;\n      \n      res.json({ token, user: userResponse });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res\n        .status(500)\n        .json({ message: error instanceof Error ? error.message : \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener perfil del usuario autenticado\n  app.get(\"/api/profile\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const { password: _, ...userResponse } = req.user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Profile error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Ruta de autenticaci√≥n para el frontend\n  app.get(\"/api/auth/user\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const { password: _, ...userResponse } = req.user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Auth user error:\", error);\n      res.status(401).json({ message: \"No autenticado\" });\n    }\n  });\n\n  // Rutas de usuarios mayores\n  app.post(\"/api/elderly-users\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const rawData = req.body;\n      // Transform dateOfBirth string to Date if provided\n      if (rawData.dateOfBirth) {\n        rawData.dateOfBirth = new Date(rawData.dateOfBirth);\n      }\n      \n      const elderlyUserData = insertElderlyUserSchema.parse(rawData);\n      const elderlyUser = await storage.createElderlyUser(elderlyUserData);\n      \n      // Crear relaci√≥n con el usuario que lo registra\n      await storage.createUserElderlyRelation({\n        userId: req.user.id,\n        elderlyUserId: elderlyUser.id,\n        relationshipType: \"caregiver\",\n        permissions: \"admin\"\n      });\n      \n      res.status(201).json(elderlyUser);\n    } catch (error) {\n      console.error(\"Create elderly user error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Error interno del servidor\" });\n    }\n  });\n\n  app.get(\"/api/elderly-users\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const elderlyUsers = await storage.getUserElderlyUsers(req.user.id);\n      res.json(elderlyUsers);\n    } catch (error) {\n      console.error(\"Get elderly users error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Obtener un adulto mayor espec√≠fico\n  app.get(\"/api/elderly-users/:elderlyUserId\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const { elderlyUserId } = req.params;\n      const elderlyUser = await storage.getElderlyUser(elderlyUserId);\n      \n      if (!elderlyUser) {\n        return res.status(404).json({ message: \"Adulto mayor no encontrado\" });\n      }\n      \n      // Verificar que el usuario tiene permisos para ver este adulto mayor\n      const relations = await storage.getUserElderlyUsers(req.user.id);\n      const hasAccess = relations.some(relation => relation.id === elderlyUserId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"No tienes permisos para acceder a este perfil\" });\n      }\n      \n      res.json(elderlyUser);\n    } catch (error) {\n      console.error(\"Get elderly user error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Actualizar perfil de adulto mayor\n  app.put(\"/api/elderly-users/:elderlyUserId\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const { elderlyUserId } = req.params;\n      \n      // Verificar que el usuario tiene permisos para editar este adulto mayor\n      const relations = await storage.getUserElderlyUsers(req.user.id);\n      const hasAccess = relations.some(relation => relation.id === elderlyUserId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ message: \"No tienes permisos para editar este perfil\" });\n      }\n      \n      // Procesar y limpiar los datos de actualizaci√≥n\n      const rawData = req.body;\n      const updateData: any = {};\n      \n      // Solo copiar campos que realmente necesitamos actualizar y que no son problem√°ticos\n      const allowedFields = [\n        'firstName', 'lastName', 'gender', 'phoneNumber', 'address',\n        'healthStatus', 'medicalHistory', 'medicalConditions',\n        'diagnoses', 'medications', 'allergies', 'sensitivities',\n        'mobilityStatus', 'mobilityAids', 'visionStatus', 'hearingStatus', 'speechStatus',\n        'emergencyContact', 'careInstructions', 'robotId', 'isActive'\n      ];\n      \n      allowedFields.forEach(field => {\n        if (rawData[field] !== undefined) {\n          updateData[field] = rawData[field];\n        }\n      });\n      \n      // Manejar fecha de nacimiento especialmente\n      if (rawData.dateOfBirth && typeof rawData.dateOfBirth === 'string') {\n        const date = new Date(rawData.dateOfBirth);\n        if (!isNaN(date.getTime())) {\n          updateData.dateOfBirth = date;\n        }\n      }\n      \n      const updatedElderlyUser = await storage.updateElderlyUser(elderlyUserId, updateData);\n      res.json(updatedElderlyUser);\n    } catch (error) {\n      console.error(\"Update elderly user error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Error interno del servidor\" });\n    }\n  });\n\n  // Rutas de interacciones\n  app.post(\"/api/interactions\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const interactionData = insertInteractionSchema.parse(req.body);\n      const interaction = await storage.createInteraction(interactionData);\n      res.status(201).json(interaction);\n    } catch (error) {\n      console.error(\"Create interaction error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Error interno del servidor\" });\n    }\n  });\n\n  app.get(\"/api/interactions/:elderlyUserId\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const { elderlyUserId } = req.params;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const interactions = await storage.getElderlyUserInteractions(elderlyUserId, limit);\n      res.json(interactions);\n    } catch (error) {\n      console.error(\"Get interactions error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Rutas de estad√≠sticas\n  app.get(\"/api/stats/:elderlyUserId\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const { elderlyUserId } = req.params;\n      const stats = await storage.getElderlyUserStats(elderlyUserId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get stats error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  app.get(\"/api/sentiment-data/:elderlyUserId\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const { elderlyUserId } = req.params;\n      const days = parseInt(req.query.days as string) || 30;\n      const sentimentData = await storage.getSentimentData(elderlyUserId, days);\n      res.json(sentimentData);\n    } catch (error) {\n      console.error(\"Get sentiment data error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Rutas de alertas de salud\n  app.post(\"/api/health-alerts\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const alertData = insertHealthAlertSchema.parse(req.body);\n      const alert = await storage.createHealthAlert(alertData);\n      res.status(201).json(alert);\n    } catch (error) {\n      console.error(\"Create health alert error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Error interno del servidor\" });\n    }\n  });\n\n  app.get(\"/api/health-alerts/:elderlyUserId\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const { elderlyUserId } = req.params;\n      const resolved = req.query.resolved === 'true' ? true : undefined;\n      const alerts = await storage.getElderlyUserAlerts(elderlyUserId, resolved);\n      res.json(alerts);\n    } catch (error) {\n      console.error(\"Get health alerts error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  app.put(\"/api/health-alerts/:alertId/resolve\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      const { alertId } = req.params;\n      await storage.resolveAlert(alertId, req.user.id);\n      res.json({ message: \"Alerta resuelta correctamente\" });\n    } catch (error) {\n      console.error(\"Resolve alert error:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Audio upload endpoint for interactions\n  app.post(\"/api/upload-audio\", authenticateToken, async (req: AuthRequest, res: Response) => {\n    try {\n      // Extract form data from request body\n      const { transcription, sentimentScore, sentimentLabel, duration, wordCount } = req.body;\n      \n      if (!transcription) {\n        return res.status(400).json({ message: \"Transcription is required\" });\n      }\n\n      // For now, we'll store the interaction without the actual audio file\n      // In production, you would upload the audio to cloud storage (S3, Cloudinary, etc.)\n      const interactionData = {\n        elderlyUserId: req.body.elderlyUserId || \"demo-elderly-user\", // Default for demo\n        interactionType: \"voice_recording\" as const,\n        content: transcription,\n        sentimentScore: parseFloat(sentimentScore) || 0,\n        sentimentLabel: sentimentLabel || \"neutral\",\n        duration: parseInt(duration) || 0,\n        metadata: {\n          wordCount: parseInt(wordCount) || 0,\n          audioProcessed: true,\n          uploadTimestamp: new Date().toISOString()\n        }\n      };\n\n      const interaction = await storage.createInteraction(interactionData);\n      \n      res.status(201).json({ \n        message: \"Audio processed successfully\",\n        interactionId: interaction.id,\n        interaction \n      });\n    } catch (error) {\n      console.error(\"Audio upload error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Error processing audio\"\n      });\n    }\n  });\n\n  // Note: Static file serving is handled by Vercel's CDN in production\n  // Local file uploads should use cloud storage (S3, Cloudinary, etc.) for Vercel deployment\n}\n","size_bytes":13277},"server/storage.ts":{"content":"import {\n  users,\n  elderlyUsers,\n  interactions,\n  healthAlerts,\n  userElderlyRelations,\n  type User,\n  type InsertUser,\n  type ElderlyUser,\n  type InsertElderlyUser,\n  type InsertInteraction,\n  type Interaction,\n  type HealthAlert,\n  type InsertHealthAlert,\n  type UserElderlyRelation,\n  type InsertUserElderlyRelation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, inArray } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: Partial<InsertUser> & { id: string }): Promise<User>;\n  \n  // Elderly user operations\n  getElderlyUser(id: string): Promise<ElderlyUser | undefined>;\n  createElderlyUser(elderlyUser: InsertElderlyUser): Promise<ElderlyUser>;\n  updateElderlyUser(id: string, data: Partial<ElderlyUser>): Promise<ElderlyUser>;\n  getUserElderlyUsers(userId: string): Promise<ElderlyUser[]>;\n  \n  // Interaction operations\n  createInteraction(interaction: InsertInteraction): Promise<Interaction>;\n  getElderlyUserInteractions(elderlyUserId: string, limit?: number): Promise<Interaction[]>;\n  getElderlyUserStats(elderlyUserId: string): Promise<{\n    totalInteractions: number;\n    avgMoodScore: number;\n    avgSentiment: number;\n    totalDuration: number;\n    alertsCount: number;\n  }>;\n  getSentimentData(elderlyUserId: string, days: number): Promise<Array<{\n    date: string;\n    sentiment: number;\n    mood: number;\n  }>>;\n  \n  // Health alerts operations\n  createHealthAlert(alert: InsertHealthAlert): Promise<HealthAlert>;\n  getElderlyUserAlerts(elderlyUserId: string, resolved?: boolean): Promise<HealthAlert[]>;\n  resolveAlert(alertId: string, resolvedBy: string): Promise<void>;\n  \n  // Relations operations\n  createUserElderlyRelation(relation: InsertUserElderlyRelation): Promise<UserElderlyRelation>;\n  getUserElderlyRelations(userId: string): Promise<UserElderlyRelation[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async upsertUser(userData: Partial<InsertUser> & { id: string }): Promise<User> {\n    const existingUser = await this.getUser(userData.id);\n    if (existingUser) {\n      const [user] = await db.update(users)\n        .set(userData)\n        .where(eq(users.id, userData.id))\n        .returning();\n      return user;\n    } else {\n      const [user] = await db.insert(users).values(userData as InsertUser).returning();\n      return user;\n    }\n  }\n\n  // Elderly user operations\n  async getElderlyUser(id: string): Promise<ElderlyUser | undefined> {\n    const [elderlyUser] = await db.select().from(elderlyUsers).where(eq(elderlyUsers.id, id));\n    return elderlyUser;\n  }\n\n  async updateElderlyUser(id: string, data: Partial<ElderlyUser>): Promise<ElderlyUser> {\n    const [elderlyUser] = await db\n      .update(elderlyUsers)\n      .set({\n        ...data,\n        updatedAt: new Date(),\n      })\n      .where(eq(elderlyUsers.id, id))\n      .returning();\n    return elderlyUser;\n  }\n\n  async createElderlyUser(elderlyUserData: InsertElderlyUser): Promise<ElderlyUser> {\n    const [elderlyUser] = await db.insert(elderlyUsers).values(elderlyUserData).returning();\n    return elderlyUser;\n  }\n\n  async getUserElderlyUsers(userId: string): Promise<ElderlyUser[]> {\n    const relations = await db\n      .select({ elderlyUserId: userElderlyRelations.elderlyUserId })\n      .from(userElderlyRelations)\n      .where(eq(userElderlyRelations.userId, userId));\n\n    if (relations.length === 0) return [];\n\n    return await db\n      .select()\n      .from(elderlyUsers)\n      .where(inArray(elderlyUsers.id, relations.map(r => r.elderlyUserId)));\n  }\n\n  // Interaction operations\n  async createInteraction(interaction: InsertInteraction): Promise<Interaction> {\n    const [newInteraction] = await db\n      .insert(interactions)\n      .values(interaction)\n      .returning();\n    return newInteraction;\n  }\n\n  async getElderlyUserInteractions(elderlyUserId: string, limit: number = 10): Promise<Interaction[]> {\n    return await db\n      .select()\n      .from(interactions)\n      .where(eq(interactions.elderlyUserId, elderlyUserId))\n      .orderBy(desc(interactions.createdAt))\n      .limit(limit);\n  }\n\n  async getElderlyUserStats(elderlyUserId: string): Promise<{\n    totalInteractions: number;\n    avgMoodScore: number;\n    avgSentiment: number;\n    totalDuration: number;\n    alertsCount: number;\n  }> {\n    const [stats] = await db\n      .select({\n        totalInteractions: sql<number>`count(*)::int`,\n        avgMoodScore: sql<number>`coalesce(avg(${interactions.moodScore}), 0)::real`,\n        avgSentiment: sql<number>`coalesce(avg(${interactions.sentimentScore}), 0)::real`,\n        totalDuration: sql<number>`coalesce(sum(${interactions.duration}), 0)::int`,\n      })\n      .from(interactions)\n      .where(eq(interactions.elderlyUserId, elderlyUserId));\n\n    const [alertsStats] = await db\n      .select({\n        alertsCount: sql<number>`count(*)::int`,\n      })\n      .from(healthAlerts)\n      .where(and(\n        eq(healthAlerts.elderlyUserId, elderlyUserId),\n        eq(healthAlerts.isResolved, \"false\")\n      ));\n\n    return {\n      totalInteractions: stats?.totalInteractions || 0,\n      avgMoodScore: stats?.avgMoodScore || 0,\n      avgSentiment: stats?.avgSentiment || 0,\n      totalDuration: stats?.totalDuration || 0,\n      alertsCount: alertsStats?.alertsCount || 0,\n    };\n  }\n\n  async getSentimentData(elderlyUserId: string, days: number = 30): Promise<Array<{\n    date: string;\n    sentiment: number;\n    mood: number;\n  }>> {\n    const result = await db\n      .select({\n        date: sql<string>`date(${interactions.createdAt})`,\n        sentiment: sql<number>`coalesce(avg(${interactions.sentimentScore}), 0)::real`,\n        mood: sql<number>`coalesce(avg(${interactions.moodScore}), 0)::real`,\n      })\n      .from(interactions)\n      .where(\n        and(\n          eq(interactions.elderlyUserId, elderlyUserId),\n          sql`${interactions.createdAt} >= current_date - interval '${sql.raw(days.toString())} days'`\n        )\n      )\n      .groupBy(sql`date(${interactions.createdAt})`)\n      .orderBy(sql`date(${interactions.createdAt})`);\n\n    return result;\n  }\n\n  // Health alerts operations\n  async createHealthAlert(alertData: InsertHealthAlert): Promise<HealthAlert> {\n    const [alert] = await db.insert(healthAlerts).values(alertData).returning();\n    return alert;\n  }\n\n  async getElderlyUserAlerts(elderlyUserId: string, resolved?: boolean): Promise<HealthAlert[]> {\n    const conditions = [eq(healthAlerts.elderlyUserId, elderlyUserId)];\n    if (resolved !== undefined) {\n      conditions.push(eq(healthAlerts.isResolved, resolved ? \"true\" : \"false\"));\n    }\n\n    return await db\n      .select()\n      .from(healthAlerts)\n      .where(and(...conditions))\n      .orderBy(desc(healthAlerts.createdAt));\n  }\n\n  async resolveAlert(alertId: string, resolvedBy: string): Promise<void> {\n    await db\n      .update(healthAlerts)\n      .set({\n        isResolved: \"true\",\n        resolvedBy,\n        resolvedAt: new Date(),\n      })\n      .where(eq(healthAlerts.id, alertId));\n  }\n\n  // Relations operations\n  async createUserElderlyRelation(relationData: InsertUserElderlyRelation): Promise<UserElderlyRelation> {\n    const [relation] = await db.insert(userElderlyRelations).values(relationData).returning();\n    return relation;\n  }\n\n  async getUserElderlyRelations(userId: string): Promise<UserElderlyRelation[]> {\n    return await db\n      .select()\n      .from(userElderlyRelations)\n      .where(eq(userElderlyRelations.userId, userId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8224},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  real,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for GaIA caregivers/family\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  role: varchar(\"role\").notNull().default(\"family\"), // \"family\", \"doctor\", \"caregiver\"\n  phoneNumber: varchar(\"phone_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Elderly users being monitored by GaIA robot\nexport const elderlyUsers = pgTable(\"elderly_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  gender: varchar(\"gender\"), // \"male\", \"female\", \"other\"\n  phoneNumber: varchar(\"phone_number\"),\n  address: text(\"address\"),\n  \n  // Estado de salud y antecedentes m√©dicos\n  healthStatus: text(\"health_status\"), // Estado general de salud\n  medicalHistory: text(\"medical_history\"), // Antecedentes m√©dicos generales\n  medicalConditions: text(\"medical_conditions\"), // Mantener compatibilidad\n  \n  // Diagn√≥sticos relevantes (JSON array)\n  diagnoses: jsonb(\"diagnoses\").$type<string[]>(),\n  \n  // Medicaciones actuales (JSON array de objetos)\n  medications: jsonb(\"medications\").$type<{\n    name: string;\n    dose: string;\n    schedule: string;\n    notes?: string;\n  }[]>(),\n  \n  // Alergias y sensibilidades (JSON arrays)\n  allergies: jsonb(\"allergies\").$type<string[]>(),\n  sensitivities: jsonb(\"sensitivities\").$type<string[]>(),\n  \n  // Movilidad y ayudas t√©cnicas\n  mobilityStatus: varchar(\"mobility_status\"), // \"independent\", \"limited\", \"assisted\", \"wheelchair\"\n  mobilityAids: jsonb(\"mobility_aids\").$type<string[]>(), // andador, bast√≥n, silla de ruedas, etc.\n  \n  // Limitaciones sensoriales\n  visionStatus: varchar(\"vision_status\"), // \"normal\", \"corrected\", \"limited\", \"blind\"\n  hearingStatus: varchar(\"hearing_status\"), // \"normal\", \"corrected\", \"limited\", \"deaf\"\n  speechStatus: varchar(\"speech_status\"), // \"normal\", \"limited\", \"non_verbal\"\n  \n  // Informaci√≥n de contacto y cuidado\n  emergencyContact: varchar(\"emergency_contact\"),\n  careInstructions: text(\"care_instructions\"),\n  \n  // Sistema de robot (mantener compatibilidad)\n  robotId: varchar(\"robot_id\").unique(), // ID del robot asignado\n  isActive: varchar(\"is_active\").default(\"true\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relationship between caregivers and elderly users\nexport const userElderlyRelations = pgTable(\"user_elderly_relations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  elderlyUserId: varchar(\"elderly_user_id\").notNull().references(() => elderlyUsers.id),\n  relationshipType: varchar(\"relationship_type\").notNull(), // \"son\", \"daughter\", \"doctor\", \"caregiver\"\n  permissions: text(\"permissions\").notNull().default(\"view\"), // \"view\", \"edit\", \"admin\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Robot interactions with elderly users\nexport const interactions = pgTable(\"interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  elderlyUserId: varchar(\"elderly_user_id\").notNull().references(() => elderlyUsers.id),\n  interactionType: varchar(\"interaction_type\").notNull(), // 'conversation', 'health_check', 'reminder', 'game'\n  audioUrl: text(\"audio_url\"),\n  transcription: text(\"transcription\"),\n  sentimentScore: real(\"sentiment_score\"),\n  sentimentLabel: varchar(\"sentiment_label\"), // 'positive', 'neutral', 'negative', 'concerning'\n  moodScore: integer(\"mood_score\"), // 1-10 scale\n  cognitiveScore: real(\"cognitive_score\"), // Cognitive assessment score\n  healthIndicators: text(\"health_indicators\"), // JSON with vital signs, etc.\n  alertLevel: varchar(\"alert_level\").default(\"normal\"), // 'normal', 'attention', 'urgent'\n  duration: integer(\"duration\").notNull(), // in seconds\n  robotResponse: text(\"robot_response\"), // What the robot said/did\n  notes: text(\"notes\"), // Additional observations\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Health alerts and notifications\nexport const healthAlerts = pgTable(\"health_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  elderlyUserId: varchar(\"elderly_user_id\").notNull().references(() => elderlyUsers.id),\n  alertType: varchar(\"alert_type\").notNull(), // 'health', 'safety', 'mood', 'cognitive'\n  severity: varchar(\"severity\").notNull(), // 'low', 'medium', 'high', 'critical'\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  isResolved: varchar(\"is_resolved\").default(\"false\"),\n  resolvedBy: varchar(\"resolved_by\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schemas and types\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n});\n\n// Schema para medicaci√≥n individual\nexport const medicationSchema = z.object({\n  name: z.string().min(1, \"Nombre de medicaci√≥n requerido\"),\n  dose: z.string().min(1, \"Dosis requerida\"),\n  schedule: z.string().min(1, \"Horario requerido\"),\n  notes: z.string().optional(),\n});\n\n// Schema completo para elderly users con validaciones detalladas\nexport const insertElderlyUserSchema = createInsertSchema(elderlyUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Schema personalizado para actualizar elderly users que maneja fechas como strings\nexport const updateElderlyUserSchema = z.object({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  dateOfBirth: z.union([z.date(), z.string().transform(str => new Date(str))]).optional().nullable(),\n  gender: z.string().optional().nullable(),\n  phoneNumber: z.string().optional().nullable(),\n  address: z.string().optional().nullable(),\n  healthStatus: z.string().optional().nullable(),\n  medicalHistory: z.string().optional().nullable(),\n  medicalConditions: z.string().optional().nullable(),\n  diagnoses: z.array(z.string()).optional().nullable(),\n  medications: z.array(medicationSchema).optional().nullable(),\n  allergies: z.array(z.string()).optional().nullable(),\n  sensitivities: z.array(z.string()).optional().nullable(),\n  mobilityStatus: z.string().optional().nullable(),\n  mobilityAids: z.array(z.string()).optional().nullable(),\n  visionStatus: z.string().optional().nullable(),\n  hearingStatus: z.string().optional().nullable(),\n  speechStatus: z.string().optional().nullable(),\n  emergencyContact: z.string().optional().nullable(),\n  careInstructions: z.string().optional().nullable(),\n  robotId: z.string().optional().nullable(),\n  isActive: z.string().optional().nullable(),\n}).partial();\n\nexport const insertInteractionSchema = createInsertSchema(interactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHealthAlertSchema = createInsertSchema(healthAlerts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserElderlyRelationSchema = createInsertSchema(userElderlyRelations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = {\n  email: string;\n  password: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  role?: string;\n  phoneNumber?: string | null;\n};\nexport type LoginUser = {\n  email: string;\n  password: string;\n};\nexport type ElderlyUser = typeof elderlyUsers.$inferSelect;\nexport type InsertElderlyUser = {\n  firstName: string;\n  lastName: string;\n  dateOfBirth?: Date | null;\n  medicalConditions?: string | null;\n  emergencyContact?: string | null;\n  robotId?: string | null;\n  isActive?: string | null;\n};\nexport type Interaction = typeof interactions.$inferSelect;\nexport type InsertInteraction = {\n  elderlyUserId: string;\n  interactionType: string;\n  audioUrl?: string | null;\n  transcription?: string | null;\n  sentimentScore?: number | null;\n  sentimentLabel?: string | null;\n  moodScore?: number | null;\n  cognitiveScore?: number | null;\n  healthIndicators?: string | null;\n  alertLevel?: string | null;\n  duration: number;\n  robotResponse?: string | null;\n  notes?: string | null;\n};\nexport type HealthAlert = typeof healthAlerts.$inferSelect;\nexport type InsertHealthAlert = {\n  elderlyUserId: string;\n  alertType: string;\n  severity: string;\n  title: string;\n  description: string;\n  isResolved?: string | null;\n  resolvedBy?: string | null;\n  resolvedAt?: Date | null;\n};\nexport type UserElderlyRelation = typeof userElderlyRelations.$inferSelect;\nexport type InsertUserElderlyRelation = {\n  userId: string;\n  elderlyUserId: string;\n  relationshipType: string;\n  permissions?: string;\n};\n","size_bytes":9549},"client/public/sw.js":{"content":"// Service Worker para GaIA PWA - Optimizado para funcionamiento independiente\nconst CACHE_NAME = 'gaia-v12-optimized';\nconst STATIC_CACHE_URLS = [\n  '/',\n  '/manifest.json',\n  '/icons/gaia-icon.png',\n  '/icons/gaia-icon.svg',\n  '/assets/index.css',\n  '/assets/index.js'\n];\n\n// URLs que requieren red activa (autenticaci√≥n cr√≠tica)\nconst NEVER_CACHE = [\n  '/api/login',\n  '/api/register'\n];\n\n// Datos que se pueden mostrar desde cache en modo offline\nconst CACHE_FRIENDLY_API = [\n  '/api/elderly-users',\n  '/api/interactions',\n  '/api/stats',\n  '/api/sentiment',\n  '/api/health-alerts'\n];\n\n// Instalar Service Worker\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Service Worker caching static files');\n        return cache.addAll(STATIC_CACHE_URLS);\n      })\n      .then(() => {\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Activar Service Worker\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activating...');\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      return self.clients.claim();\n    })\n  );\n});\n\n// Estrategia de cache: Network First para API, Cache First para assets\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n\n  // API requests - Estrategia inteligente para funcionamiento independiente\n  if (url.pathname.startsWith('/api/')) {\n    const shouldNeverCache = NEVER_CACHE.some(path => url.pathname.startsWith(path));\n    const isCacheFriendly = CACHE_FRIENDLY_API.some(path => url.pathname.startsWith(path));\n    \n    if (shouldNeverCache) {\n      // Auth endpoints requieren red activa\n      event.respondWith(fetch(request));\n    } else if (isCacheFriendly) {\n      // Datos del usuario: Cache First para funcionamiento offline\n      event.respondWith(\n        caches.match(request).then((cached) => {\n          if (cached) {\n            // Actualizar cache en background si hay red\n            fetch(request).then((response) => {\n              if (response.ok) {\n                caches.open(CACHE_NAME).then((cache) => {\n                  cache.put(request, response.clone());\n                });\n              }\n            }).catch(() => {});\n            return cached;\n          }\n          // Si no hay cache, intentar red\n          return fetch(request).then((response) => {\n            if (response.ok) {\n              const responseClone = response.clone();\n              caches.open(CACHE_NAME).then((cache) => {\n                cache.put(request, responseClone);\n              });\n            }\n            return response;\n          });\n        })\n      );\n    } else {\n      // Otros endpoints: Network First con fallback a cache\n      event.respondWith(\n        fetch(request)\n          .then((response) => {\n            if (response.ok) {\n              const responseClone = response.clone();\n              caches.open(CACHE_NAME).then((cache) => {\n                cache.put(request, responseClone);\n              });\n            }\n            return response;\n          })\n          .catch(() => {\n            return caches.match(request) || new Response(\n              JSON.stringify({ error: 'Sin conexi√≥n. Funcionalidad limitada disponible.' }),\n              { status: 503, headers: { 'Content-Type': 'application/json' } }\n            );\n          })\n      );\n    }\n    return;\n  }\n\n  // Static assets - Cache First\n  event.respondWith(\n    caches.match(request)\n      .then((cachedResponse) => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n        \n        return fetch(request).then((response) => {\n          // Cache successful responses\n          if (response.ok) {\n            const responseClone = response.clone();\n            caches.open(CACHE_NAME).then((cache) => {\n              cache.put(request, responseClone);\n            });\n          }\n          return response;\n        });\n      })\n      .catch(() => {\n        // Fallback for navigation requests\n        if (request.mode === 'navigate') {\n          return caches.match('/');\n        }\n      })\n  );\n});","size_bytes":4480},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { NetworkStatus } from \"@/components/NetworkStatus\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport ElderlyUserProfile from \"@/pages/ElderlyUserProfile\";\nimport { Bot } from \"lucide-react\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Si est√° cargando, mostrar loading\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Bot className=\"h-12 w-12 text-blue-600 animate-pulse mx-auto mb-4\" />\n          <p className=\"text-gray-600 dark:text-gray-300\">Cargando GaIA...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/elderly-users/:id\" component={ElderlyUserProfile} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-gray-800\">\n          <NetworkStatus />\n          <Router />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":1809},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Mobile Optimizations for PWA */\n@media (max-width: 768px) {\n  /* Prevent horizontal scrolling */\n  body {\n    overflow-x: hidden;\n  }\n  \n  /* Container adjustments */\n  .container {\n    @apply px-3;\n    max-width: 100%;\n  }\n  \n  /* Better touch targets for mobile */\n  button, [role=\"button\"] {\n    min-height: 48px;\n    min-width: 48px;\n    @apply text-sm px-4 py-3;\n  }\n  \n  /* Viewport optimizations */\n  .min-h-screen {\n    min-height: 100vh;\n    min-height: 100dvh;\n  }\n  \n  /* Grid responsive adjustments */\n  .grid.md\\\\:grid-cols-2.lg\\\\:grid-cols-3 {\n    @apply grid-cols-1 gap-4;\n  }\n  \n  /* Dialog content fits screen */\n  .dialog-content {\n    @apply max-w-[95vw] max-h-[90vh] overflow-y-auto;\n  }\n  \n  /* Form improvements */\n  .grid.grid-cols-2 {\n    @apply grid-cols-1;\n  }\n  \n  /* Text sizing adjustments */\n  .text-2xl {\n    @apply text-xl;\n  }\n  \n  /* Header height adjustment */\n  .h-16 {\n    @apply h-14;\n  }\n  \n  /* Improved mobile forms */\n  input, textarea, select {\n    font-size: 16px;\n    @apply h-12 px-4 text-base;\n  }\n}\n\n/* PWA specific styles */\n@media (display-mode: standalone) {\n  /* Hide elements that don't make sense in PWA mode */\n  .web-only {\n    display: none;\n  }\n  \n  /* Add status bar spacing for PWA */\n  body {\n    padding-top: env(safe-area-inset-top);\n  }\n}","size_bytes":2988},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AudioRecorder.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { simulateTranscription } from \"@/lib/audioUtils\";\nimport { analyzeSentiment } from \"@/lib/sentimentAnalysis\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function AudioRecorder() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const [audioUrl, setAudioUrl] = useState<string>(\"\");\n  const [liveTranscription, setLiveTranscription] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await apiRequest(\"POST\", \"/api/upload-audio\", formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Grabaci√≥n procesada\",\n        description: \"Tu grabaci√≥n ha sido analizada exitosamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/interactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sentiment-data\"] });\n      \n      // Reset state\n      setAudioBlob(null);\n      setAudioUrl(\"\");\n      setLiveTranscription(\"\");\n      setIsProcessing(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to process recording\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    },\n  });\n\n  useEffect(() => {\n    if (isRecording && timerRef.current === null) {\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } else if (!isRecording && timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isRecording]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      \n      audioChunksRef.current = [];\n      \n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n        setAudioBlob(blob);\n        setAudioUrl(URL.createObjectURL(blob));\n        \n        // Stop all tracks\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Start processing\n        processRecording(blob);\n      };\n      \n      mediaRecorderRef.current.start(100); // Collect data every 100ms\n      setIsRecording(true);\n      setRecordingTime(0);\n      setLiveTranscription(\"Escuchando...\");\n      \n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Could not access microphone\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const toggleRecording = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  const playRecording = () => {\n    if (audioUrl && audioRef.current) {\n      audioRef.current.play();\n    }\n  };\n\n  const processRecording = async (blob: Blob) => {\n    setIsProcessing(true);\n    \n    try {\n      // Simulate transcription (in real app, this would use Vosk.js or similar)\n      const transcription = await simulateTranscription(blob);\n      setLiveTranscription(transcription);\n      \n      // Analyze sentiment\n      const sentiment = analyzeSentiment(transcription);\n      \n      // Calculate additional metadata\n      const duration = recordingTime;\n      const wordCount = transcription.split(' ').filter(word => word.length > 0).length;\n      \n      // Create form data for upload\n      const formData = new FormData();\n      formData.append('audio', blob, 'recording.webm');\n      formData.append('transcription', transcription);\n      formData.append('sentimentScore', sentiment.score.toString());\n      formData.append('sentimentLabel', sentiment.label);\n      formData.append('duration', duration.toString());\n      formData.append('wordCount', wordCount.toString());\n      \n      // Upload to server\n      uploadMutation.mutate(formData);\n      \n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process recording\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Card className=\"mb-8\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-slate-900\">Nueva Grabaci√≥n</h3>\n          <div className=\"flex items-center space-x-2 text-sm text-slate-500\">\n            <i className={`fas fa-circle ${isRecording ? 'text-red-500 animate-pulse' : 'text-green-500'}`}></i>\n            <span>{isRecording ? 'Grabando...' : 'Listo para grabar'}</span>\n          </div>\n        </div>\n        \n        <div className=\"text-center py-8\">\n          {/* Recording Visualizer */}\n          <div className=\"mb-6\">\n            <div className=\"flex justify-center items-end space-x-1 h-16\">\n              {[1, 2, 3, 4, 5, 6, 7].map((_, i) => (\n                <div\n                  key={i}\n                  className={`w-2 rounded-full transition-all duration-200 ${\n                    isRecording \n                      ? `bg-primary animate-pulse h-${4 + (i * 2)}` \n                      : 'bg-slate-300 h-4'\n                  }`}\n                  style={{\n                    animationDelay: `${i * 100}ms`,\n                    height: isRecording ? `${16 + (i * 8)}px` : '16px'\n                  }}\n                ></div>\n              ))}\n            </div>\n          </div>\n\n          {/* Recording Controls */}\n          <div className=\"flex justify-center items-center space-x-4 mb-6\">\n            <Button\n              onClick={toggleRecording}\n              disabled={isProcessing}\n              className={`rounded-full w-16 h-16 shadow-lg transition-all duration-200 transform hover:scale-105 ${\n                isRecording \n                  ? 'bg-red-600 hover:bg-red-700' \n                  : 'bg-primary hover:bg-primary/90'\n              }`}\n            >\n              <i className={`fas ${isRecording ? 'fa-stop' : 'fa-microphone'} text-xl`}></i>\n            </Button>\n            \n            <Button\n              variant=\"secondary\"\n              onClick={playRecording}\n              disabled={!audioUrl || isRecording || isProcessing}\n              className=\"rounded-full w-12 h-12\"\n            >\n              <i className=\"fas fa-play text-sm\"></i>\n            </Button>\n          </div>\n\n          {/* Recording Status */}\n          <div className=\"text-center\">\n            <p className=\"text-slate-600 mb-2\">\n              {isRecording ? 'Grabando...' : 'Presiona el bot√≥n para comenzar a grabar'}\n            </p>\n            <div className=\"text-sm text-slate-500\">\n              <span>{formatTime(recordingTime)}</span> / 05:00 m√°x.\n            </div>\n          </div>\n\n          {/* Live Transcription Preview */}\n          <div className=\"mt-6 p-4 bg-slate-50 rounded-lg border border-slate-200\">\n            <h4 className=\"text-sm font-medium text-slate-700 mb-2\">Transcripci√≥n en tiempo real:</h4>\n            <p className=\"text-slate-600 italic min-h-[3rem]\">\n              {liveTranscription || \"La transcripci√≥n aparecer√° aqu√≠ mientras hablas...\"}\n            </p>\n            {isProcessing && (\n              <div className=\"flex items-center justify-center mt-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\"></div>\n                <span className=\"text-sm text-slate-500\">Procesando...</span>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Hidden audio element for playback */}\n        <audio ref={audioRef} src={audioUrl} />\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9528},"client/src/components/InteractionsList.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function InteractionsList() {\n  const [limit, setLimit] = useState(10);\n\n  const { data: interactions, isLoading } = useQuery({\n    queryKey: [\"/api/interactions\", limit],\n    queryFn: async () => {\n      const response = await fetch(`/api/interactions?limit=${limit}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch interactions\");\n      return response.json();\n    },\n  });\n\n  const getSentimentBadge = (score: number, label: string) => {\n    const baseClasses = \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\";\n    \n    if (label === 'positive') {\n      return `${baseClasses} bg-green-100 text-green-800`;\n    } else if (label === 'negative') {\n      return `${baseClasses} bg-red-100 text-red-800`;\n    } else {\n      return `${baseClasses} bg-yellow-100 text-yellow-800`;\n    }\n  };\n\n  const getSentimentIcon = (label: string) => {\n    if (label === 'positive') return 'fa-smile';\n    if (label === 'negative') return 'fa-frown';\n    return 'fa-meh';\n  };\n\n  const getSentimentText = (label: string) => {\n    if (label === 'positive') return 'Positivo';\n    if (label === 'negative') return 'Negativo';\n    return 'Neutral';\n  };\n\n  const playAudio = (audioUrl: string) => {\n    const audio = new Audio(audioUrl);\n    audio.play().catch(error => {\n      console.error('Error playing audio:', error);\n    });\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const loadMore = () => {\n    setLimit(prev => prev + 10);\n  };\n\n  if (isLoading && limit === 10) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <div className=\"px-6 py-4 border-b border-slate-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-slate-900\">Interacciones Recientes</h3>\n          <button className=\"text-primary hover:text-primary/80 text-sm font-medium\">\n            Ver todas <i className=\"fas fa-arrow-right ml-1\"></i>\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"divide-y divide-slate-200\">\n        {interactions && interactions.length > 0 ? (\n          interactions.map((interaction: any) => (\n            <div key={interaction.id} className=\"px-6 py-4 hover:bg-slate-50 transition-colors duration-150\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4 flex-1\">\n                  <div className=\"flex-shrink-0 mt-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-8 h-8 rounded-full bg-slate-100 hover:bg-slate-200 p-0\"\n                      onClick={() => playAudio(interaction.audioUrl)}\n                    >\n                      <i className=\"fas fa-play text-xs text-slate-600\"></i>\n                    </Button>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <p className=\"text-sm text-slate-500\">\n                        {formatDistanceToNow(new Date(interaction.createdAt), { \n                          addSuffix: true, \n                          locale: es \n                        })}\n                      </p>\n                      <span className={getSentimentBadge(interaction.sentimentScore, interaction.sentimentLabel)}>\n                        <i className={`fas ${getSentimentIcon(interaction.sentimentLabel)} mr-1`}></i>\n                        {getSentimentText(interaction.sentimentLabel)}\n                      </span>\n                      <span className=\"text-xs text-slate-400\">\n                        {interaction.sentimentScore > 0 ? '+' : ''}{interaction.sentimentScore.toFixed(2)}\n                      </span>\n                    </div>\n                    <p className=\"text-slate-900 text-sm\">\n                      \"{interaction.transcription}\"\n                    </p>\n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-slate-500\">\n                      <span>\n                        <i className=\"fas fa-clock mr-1\"></i>\n                        {formatDuration(interaction.duration)}\n                      </span>\n                      <span>\n                        <i className=\"fas fa-font mr-1\"></i>\n                        {interaction.wordCount} palabras\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex-shrink-0 ml-4\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-slate-400 hover:text-slate-600 p-1\">\n                    <i className=\"fas fa-ellipsis-v\"></i>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"px-6 py-8 text-center\">\n            <i className=\"fas fa-microphone-alt text-slate-300 text-4xl mb-4\"></i>\n            <p className=\"text-slate-500\">No hay grabaciones a√∫n</p>\n            <p className=\"text-sm text-slate-400\">Comienza grabando tu primera interacci√≥n</p>\n          </div>\n        )}\n      </div>\n      \n      {interactions && interactions.length > 0 && interactions.length >= limit && (\n        <div className=\"px-6 py-4 bg-slate-50 border-t border-slate-200\">\n          <Button\n            variant=\"ghost\"\n            onClick={loadMore}\n            className=\"w-full text-slate-600 hover:text-slate-800\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-slate-400 mr-2\"></div>\n                Cargando...\n              </>\n            ) : (\n              \"Cargar m√°s interacciones\"\n            )}\n          </Button>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":6555},"client/src/components/NetworkStatus.tsx":{"content":"// Componente indicador de estado de red para PWA m√≥vil\nimport { useNetworkStatus } from '@/hooks/useNetworkStatus';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Wifi, WifiOff, Server } from 'lucide-react';\n\nexport function NetworkStatus() {\n  const { isOnline, isServerReachable, isFullyConnected } = useNetworkStatus();\n\n  if (isFullyConnected) {\n    return null; // No mostrar nada cuando todo funciona\n  }\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 z-50 p-2\">\n      <Alert \n        variant={!isOnline ? \"destructive\" : \"default\"}\n        className=\"mx-auto max-w-md shadow-lg\"\n      >\n        <div className=\"flex items-center gap-2\">\n          {!isOnline ? (\n            <WifiOff className=\"h-4 w-4\" />\n          ) : !isServerReachable ? (\n            <Server className=\"h-4 w-4\" />\n          ) : (\n            <Wifi className=\"h-4 w-4\" />\n          )}\n          <AlertDescription className=\"text-sm\">\n            {!isOnline \n              ? \"Sin conexi√≥n a internet. Mostrando datos guardados.\"\n              : !isServerReachable \n              ? \"Servidor no disponible. Funcionalidad limitada.\"\n              : \"Conectando...\"\n            }\n          </AlertDescription>\n        </div>\n      </Alert>\n    </div>\n  );\n}","size_bytes":1273},"client/src/components/OfflineNotice.tsx":{"content":"import { AlertTriangle, Wifi, WifiOff } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\n\nexport function OfflineNotice() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [showOfflineAlert, setShowOfflineAlert] = useState(false);\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setShowOfflineAlert(false);\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setShowOfflineAlert(true);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Verificar conectividad al servidor\n    const checkServerConnection = async () => {\n      try {\n        const response = await fetch('/api/health', {\n          method: 'HEAD',\n          signal: AbortSignal.timeout(5000)\n        });\n        if (!response.ok) {\n          setShowOfflineAlert(true);\n        }\n      } catch {\n        setShowOfflineAlert(true);\n      }\n    };\n\n    if (isOnline) {\n      checkServerConnection();\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [isOnline]);\n\n  if (!showOfflineAlert && isOnline) {\n    return null;\n  }\n\n  return (\n    <Alert className=\"border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-900/20\">\n      <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n      <AlertTitle className=\"text-orange-800 dark:text-orange-200\">\n        {!isOnline ? 'Sin conexi√≥n a internet' : 'Sin conexi√≥n al servidor'}\n      </AlertTitle>\n      <AlertDescription className=\"text-orange-700 dark:text-orange-300 mb-3\">\n        {!isOnline \n          ? 'Verifica tu conexi√≥n a internet para usar todas las funciones de GaIA.'\n          : 'Para usar la aplicaci√≥n instalada de forma independiente, debe estar desplegada en producci√≥n.'\n        }\n      </AlertDescription>\n      <div className=\"flex gap-2\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={() => window.location.reload()}\n          className=\"border-orange-300 text-orange-800 hover:bg-orange-100 dark:border-orange-700 dark:text-orange-200\"\n        >\n          <Wifi className=\"h-3 w-3 mr-1\" />\n          Reintentar\n        </Button>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          onClick={() => setShowOfflineAlert(false)}\n          className=\"text-orange-600 hover:text-orange-800 dark:text-orange-400\"\n        >\n          Cerrar\n        </Button>\n      </div>\n    </Alert>\n  );\n}","size_bytes":2701},"client/src/components/SentimentChart.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Area, AreaChart } from \"recharts\";\n\nexport default function SentimentChart() {\n  const [selectedPeriod, setSelectedPeriod] = useState(30);\n\n  const { data: sentimentData, isLoading } = useQuery({\n    queryKey: [\"/api/sentiment-data\", selectedPeriod],\n    queryFn: async () => {\n      const response = await fetch(`/api/sentiment-data?days=${selectedPeriod}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch sentiment data\");\n      return response.json();\n    },\n  });\n\n  const formatData = (data: any[]) => {\n    if (!data) return [];\n    return data.map(item => ({\n      date: new Date(item.date).toLocaleDateString('es-ES', { month: 'short', day: 'numeric' }),\n      sentiment: parseFloat(item.sentiment || 0),\n    }));\n  };\n\n  const getSentimentColor = (value: number) => {\n    if (value > 0.3) return '#10b981'; // green\n    if (value < -0.3) return '#ef4444'; // red\n    return '#f59e0b'; // yellow\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const value = payload[0].value;\n      return (\n        <div className=\"bg-white p-3 border border-slate-200 rounded-lg shadow-lg\">\n          <p className=\"text-sm font-medium text-slate-700\">{label}</p>\n          <p className=\"text-sm\" style={{ color: getSentimentColor(value) }}>\n            Sentimiento: {value > 0 ? '+' : ''}{value.toFixed(2)}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-slate-900\">An√°lisis de Sentimientos</h3>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant={selectedPeriod === 7 ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedPeriod(7)}\n            >\n              7d\n            </Button>\n            <Button\n              variant={selectedPeriod === 30 ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedPeriod(30)}\n            >\n              30d\n            </Button>\n            <Button\n              variant={selectedPeriod === 90 ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedPeriod(90)}\n            >\n              90d\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"h-64\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart data={formatData(sentimentData)} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <defs>\n                  <linearGradient id=\"sentimentGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"hsl(207, 90%, 54%)\" stopOpacity={0.3}/>\n                    <stop offset=\"95%\" stopColor=\"hsl(207, 90%, 54%)\" stopOpacity={0}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n                <XAxis \n                  dataKey=\"date\" \n                  stroke=\"#64748b\"\n                  fontSize={12}\n                />\n                <YAxis \n                  domain={[-1, 1]}\n                  stroke=\"#64748b\"\n                  fontSize={12}\n                  tickFormatter={(value) => value.toFixed(1)}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"sentiment\"\n                  stroke=\"hsl(207, 90%, 54%)\"\n                  strokeWidth={3}\n                  fill=\"url(#sentimentGradient)\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          )}\n        </div>\n        \n        {/* Chart Legend */}\n        <div className=\"flex items-center justify-center space-x-6 mt-4 text-sm\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n            <span className=\"text-slate-600\">Positivo (0.3+)</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-2\"></div>\n            <span className=\"text-slate-600\">Neutral (-0.3 a 0.3)</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n            <span className=\"text-slate-600\">Negativo (-0.3-)</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5128},"client/src/components/StatsCards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/stats\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return response.json();\n    },\n  });\n\n  const formatDuration = (totalSeconds: number) => {\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const formatSentiment = (score: number) => {\n    return score > 0 ? `+${score.toFixed(2)}` : score.toFixed(2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-slate-200 rounded-lg animate-pulse\"></div>\n                <div className=\"ml-4 flex-1\">\n                  <div className=\"h-4 bg-slate-200 rounded animate-pulse mb-2\"></div>\n                  <div className=\"h-6 bg-slate-200 rounded animate-pulse w-16\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-microphone-alt text-blue-600\"></i>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-slate-600\">Total Grabaciones</p>\n              <p className=\"text-2xl font-semibold text-slate-900\">\n                {stats?.totalRecordings || 0}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-smile text-green-600\"></i>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-slate-600\">Sentimiento Promedio</p>\n              <p className=\"text-2xl font-semibold text-slate-900\">\n                {stats?.avgSentiment ? formatSentiment(stats.avgSentiment) : '0.00'}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-clock text-purple-600\"></i>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-slate-600\">Tiempo Total</p>\n              <p className=\"text-2xl font-semibold text-slate-900\">\n                {stats?.totalDuration ? formatDuration(stats.totalDuration) : '0m'}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3678},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getAuthToken, clearAuthData, isTokenValid } from \"@/lib/authUtils\";\n\nexport function useAuth() {\n  const token = getAuthToken();\n  \n  // Verificar si el token es v√°lido antes de hacer la consulta\n  const isValidToken = token ? isTokenValid(token) : false;\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    enabled: isValidToken, // Solo hacer la consulta si el token es v√°lido\n  });\n\n  // Si hay error en la autenticaci√≥n o token inv√°lido, limpiar datos\n  if ((error || !isValidToken) && token) {\n    console.log('Token inv√°lido o error de autenticaci√≥n, limpiando localStorage');\n    clearAuthData();\n    return {\n      user: null,\n      isLoading: false,\n      isAuthenticated: false,\n      logout: clearAuthData,\n    };\n  }\n\n  const logout = () => {\n    clearAuthData();\n  };\n\n  return {\n    user,\n    isLoading: isValidToken ? isLoading : false,\n    isAuthenticated: !!user && isValidToken && !error,\n    logout,\n  };\n}\n","size_bytes":1052},"client/src/hooks/useNetworkStatus.ts":{"content":"// Hook para monitorear estado de red en PWA m√≥vil\nimport { useState, useEffect } from 'react';\n\nexport function useNetworkStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isServerReachable, setIsServerReachable] = useState(true);\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      // Verificar conectividad con servidor\n      checkServerConnection();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setIsServerReachable(false);\n    };\n\n    const checkServerConnection = async () => {\n      try {\n        const response = await fetch('/api/health', { \n          method: 'GET',\n          cache: 'no-cache'\n        });\n        setIsServerReachable(response.ok);\n      } catch {\n        setIsServerReachable(false);\n      }\n    };\n\n    // Verificar conexi√≥n inicial\n    if (isOnline) {\n      checkServerConnection();\n    }\n\n    // Verificaci√≥n peri√≥dica cuando est√° online\n    const interval = isOnline ? setInterval(checkServerConnection, 30000) : null;\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      if (interval) clearInterval(interval);\n    };\n  }, [isOnline]);\n\n  return {\n    isOnline,\n    isServerReachable,\n    isFullyConnected: isOnline && isServerReachable\n  };\n}","size_bytes":1474},"client/src/lib/apiConfig.ts":{"content":"// Configuration for API endpoints - handles development and production URLs\n\nexport function getApiBaseUrl(): string {\n  // En producci√≥n, usar la URL de deployment de Replit\n  if (typeof window !== 'undefined') {\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n    const port = window.location.port;\n    \n    // Si estamos en un deployment de Replit (.replit.app)\n    if (hostname.includes('.replit.app') || hostname.includes('.repl.co')) {\n      return `${protocol}//${hostname}`;\n    }\n    \n    // Si estamos en localhost (desarrollo)\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      return `${protocol}//${hostname}:${port || '5000'}`;\n    }\n    \n    // Para otros casos, usar la URL actual\n    return `${protocol}//${hostname}${port ? `:${port}` : ''}`;\n  }\n  \n  // Fallback para servidor\n  return process.env.API_BASE_URL || 'http://localhost:5000';\n}\n\nexport function getFullApiUrl(endpoint: string): string {\n  const baseUrl = getApiBaseUrl();\n  const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  return `${baseUrl}${cleanEndpoint}`;\n}\n\n// Verificar si estamos en modo offline\nexport function isOfflineMode(): boolean {\n  return typeof navigator !== 'undefined' && !navigator.onLine;\n}\n\n// Configuraci√≥n para requests con timeout\nexport const API_CONFIG = {\n  timeout: 10000, // 10 segundos\n  retries: 2,\n  retryDelay: 1000 // 1 segundo\n};","size_bytes":1444},"client/src/lib/audioUtils.ts":{"content":"// Simulated transcription function (in production, use Vosk.js or similar)\nexport async function simulateTranscription(audioBlob: Blob): Promise<string> {\n  // In a real implementation, this would use Vosk.js or send to a transcription service\n  // For now, we'll simulate with some realistic Spanish phrases\n  \n  const sampleTranscriptions = [\n    \"Estoy muy contento con los resultados del proyecto. El equipo ha trabajado excelentemente y superamos todas las expectativas.\",\n    \"Necesitamos revisar algunos aspectos del informe. Hay varios puntos que requieren m√°s an√°lisis antes de continuar.\",\n    \"Estoy bastante frustrado con los retrasos. Esto est√° afectando negativamente nuestros planes y necesitamos una soluci√≥n urgente.\",\n    \"Me siento optimista sobre las pr√≥ximas oportunidades. Creo que vamos por buen camino y los resultados ser√°n positivos.\",\n    \"La reuni√≥n de hoy fue muy productiva. Logramos aclarar muchas dudas y establecer un plan claro para seguir adelante.\",\n    \"Tengo algunas preocupaciones sobre el presupuesto. Es importante que evaluemos todas las opciones antes de tomar una decisi√≥n.\",\n    \"Excelente trabajo en la presentaci√≥n. Los clientes quedaron muy impresionados con nuestra propuesta y el nivel de detalle.\",\n    \"Creo que deber√≠amos considerar alternativas. La estrategia actual no est√° dando los resultados que esper√°bamos.\",\n    \"Estoy emocionado por comenzar este nuevo proyecto. Las posibilidades son infinitas y el equipo est√° muy motivado.\",\n    \"La situaci√≥n requiere atenci√≥n inmediata. No podemos permitir que estos problemas se prolonguen m√°s tiempo.\"\n  ];\n  \n  // Simulate processing time\n  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n  \n  // Return a random transcription\n  return sampleTranscriptions[Math.floor(Math.random() * sampleTranscriptions.length)];\n}\n\n// Audio visualization utilities\nexport function createAudioVisualizer(canvas: HTMLCanvasElement, audioContext: AudioContext, stream: MediaStream) {\n  const analyser = audioContext.createAnalyser();\n  const source = audioContext.createMediaStreamSource(stream);\n  \n  source.connect(analyser);\n  \n  analyser.fftSize = 256;\n  const bufferLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(bufferLength);\n  \n  const canvasCtx = canvas.getContext('2d')!;\n  const WIDTH = canvas.width;\n  const HEIGHT = canvas.height;\n  \n  function draw() {\n    requestAnimationFrame(draw);\n    \n    analyser.getByteFrequencyData(dataArray);\n    \n    canvasCtx.fillStyle = 'rgb(248, 250, 252)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n    \n    const barWidth = (WIDTH / bufferLength) * 2.5;\n    let barHeight;\n    let x = 0;\n    \n    for (let i = 0; i < bufferLength; i++) {\n      barHeight = (dataArray[i] / 255) * HEIGHT;\n      \n      canvasCtx.fillStyle = `hsl(207, 90%, ${50 + (barHeight/HEIGHT) * 20}%)`;\n      canvasCtx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n      \n      x += barWidth + 1;\n    }\n  }\n  \n  draw();\n  \n  return () => {\n    source.disconnect();\n  };\n}\n","size_bytes":3061},"client/src/lib/authUtils.ts":{"content":"// Utility functions for authentication management\n\nexport function clearAuthData() {\n  localStorage.removeItem('eldercompanion_token');\n  // Clear any cached queries related to auth\n  window.location.reload();\n}\n\nexport function setAuthToken(token: string) {\n  localStorage.setItem('eldercompanion_token', token);\n}\n\nexport function getAuthToken(): string | null {\n  return localStorage.getItem('eldercompanion_token');\n}\n\nexport function isTokenValid(token: string): boolean {\n  if (!token) return false;\n  \n  try {\n    // Basic JWT structure check (header.payload.signature)\n    const parts = token.split('.');\n    if (parts.length !== 3) return false;\n    \n    // Check if payload can be parsed (basic validation)\n    const payload = JSON.parse(atob(parts[1]));\n    const now = Date.now() / 1000;\n    \n    // Check if token is expired\n    if (payload.exp && payload.exp < now) {\n      return false;\n    }\n    \n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isUnauthorizedError(error: any): boolean {\n  // Check if error has status or response status indicating unauthorized\n  if (error?.status === 401 || error?.response?.status === 401) {\n    return true;\n  }\n  \n  // Check if error message indicates unauthorized\n  if (error?.message && typeof error.message === 'string') {\n    const message = error.message.toLowerCase();\n    return message.includes('unauthorized') || message.includes('401');\n  }\n  \n  return false;\n}","size_bytes":1448},"client/src/lib/queryClient.ts":{"content":"// client/src/lib/queryClient.ts\n\nimport { QueryClient } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> {\n  const token = localStorage.getItem(\"eldercompanion_token\");\n  \n  // Build the complete URL for mobile compatibility and deployment\n  const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';\n  const fullUrl = url.startsWith('/') ? `${baseUrl}${url}` : url;\n  \n  // Detector de conectividad mejorado\n  const isOnline = navigator.onLine;\n  if (!isOnline && !url.includes('/api/auth/user')) {\n    // Mostrar indicador de offline para requests no cr√≠ticos\n    console.log('üì± Modo offline - usando datos en cache');\n  }\n  \n  const headers: Record<string, string> = {\n    'Accept': 'application/json',\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  let body: string | FormData | undefined;\n  if (data) {\n    if (data instanceof FormData) {\n      body = data;\n    } else {\n      headers[\"Content-Type\"] = \"application/json\";\n      body = JSON.stringify(data);\n    }\n  }\n\n  // Improved error handling for network issues\n  try {\n    const res = await fetch(fullUrl, {\n      method,\n      headers,\n      body,\n      credentials: 'same-origin',\n      // Add timeout and better error handling\n      signal: AbortSignal.timeout(15000), // 15 second timeout\n    });\n\n    await throwIfResNotOk(res);\n    return res;\n  } catch (error) {\n    console.error('API Request failed:', { method, url: fullUrl, error });\n    \n    // Mensaje m√°s claro para el usuario sobre problemas de conexi√≥n\n    if (error instanceof Error) {\n      if (error.name === 'TimeoutError' || error.message.includes('timeout')) {\n        throw new Error('La aplicaci√≥n necesita conexi√≥n al servidor. Verifica que el servidor est√© ejecut√°ndose.');\n      }\n      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n        throw new Error('Sin conexi√≥n al servidor. Para usar la aplicaci√≥n instalada, debe estar desplegada en producci√≥n.');\n      }\n    }\n    \n    throw error;\n  }\n}\n\n// Configurar el QueryClient con fetcher por defecto\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: (failureCount, error: any) => {\n        // Don't retry on 4xx errors\n        if (error?.message?.includes('4')) {\n          return false;\n        }\n        return failureCount < 2;\n      },\n      queryFn: async ({ queryKey }) => {\n        const response = await apiRequest(\"GET\", queryKey[0] as string);\n        return response.json();\n      },\n    },\n  },\n});\n","size_bytes":2858},"client/src/lib/sentimentAnalysis.ts":{"content":"// Simulated sentiment analysis (in production, use Hugging Face API or similar)\nexport interface SentimentResult {\n  score: number; // -1 to 1 range\n  label: 'positive' | 'neutral' | 'negative';\n  confidence: number; // 0 to 1 range\n}\n\nconst positiveWords = [\n  'excelente', 'genial', 'fant√°stico', 'incre√≠ble', 'perfecto', 'maravilloso',\n  'contento', 'feliz', 'alegre', 'satisfecho', 'optimista', 'entusiasmado',\n  'emocionado', 'impresionado', 'positivo', 'bueno', 'bien', '√©xito',\n  'logro', 'victoria', 'triunfo', 'superamos', 'excelentemente', 'productiva'\n];\n\nconst negativeWords = [\n  'terrible', 'horrible', 'p√©simo', 'malo', 'frustrado', 'molesto',\n  'preocupado', 'triste', 'decepcionado', 'negativo', 'problema', 'error',\n  'retrasos', 'afectando', 'urgente', 'preocupaciones', 'problemas',\n  'atenci√≥n', 'inmediata', 'permitir', 'prolonguen'\n];\n\nconst neutralWords = [\n  'revisar', 'aspectos', 'an√°lisis', 'continuar', 'considerar', 'alternativas',\n  'estrategia', 'evaluemos', 'opciones', 'decisi√≥n', 'situaci√≥n', 'requiere'\n];\n\nexport function analyzeSentiment(text: string): SentimentResult {\n  if (!text || text.trim().length === 0) {\n    return {\n      score: 0,\n      label: 'neutral',\n      confidence: 1\n    };\n  }\n\n  const words = text.toLowerCase().split(/\\s+/);\n  let positiveCount = 0;\n  let negativeCount = 0;\n  let neutralCount = 0;\n\n  words.forEach(word => {\n    // Remove punctuation\n    const cleanWord = word.replace(/[^\\w]/g, '');\n    \n    if (positiveWords.some(pw => cleanWord.includes(pw) || pw.includes(cleanWord))) {\n      positiveCount++;\n    } else if (negativeWords.some(nw => cleanWord.includes(nw) || nw.includes(cleanWord))) {\n      negativeCount++;\n    } else if (neutralWords.some(neu => cleanWord.includes(neu) || neu.includes(cleanWord))) {\n      neutralCount++;\n    }\n  });\n\n  const totalSentimentWords = positiveCount + negativeCount + neutralCount;\n  \n  if (totalSentimentWords === 0) {\n    return {\n      score: 0,\n      label: 'neutral',\n      confidence: 0.5\n    };\n  }\n\n  // Calculate weighted score\n  const positiveWeight = positiveCount / totalSentimentWords;\n  const negativeWeight = negativeCount / totalSentimentWords;\n  \n  let score = positiveWeight - negativeWeight;\n  \n  // Add some randomization to make it more realistic\n  score += (Math.random() - 0.5) * 0.3;\n  \n  // Clamp to -1 to 1 range\n  score = Math.max(-1, Math.min(1, score));\n  \n  let label: 'positive' | 'neutral' | 'negative';\n  if (score > 0.3) {\n    label = 'positive';\n  } else if (score < -0.3) {\n    label = 'negative';\n  } else {\n    label = 'neutral';\n  }\n\n  const confidence = Math.min(0.95, 0.5 + Math.abs(score) * 0.5);\n\n  return {\n    score: parseFloat(score.toFixed(2)),\n    label,\n    confidence: parseFloat(confidence.toFixed(2))\n  };\n}\n\n// Simulated Hugging Face API call (for future implementation)\nexport async function analyzeWithHuggingFace(text: string, apiKey?: string): Promise<SentimentResult> {\n  // In production, this would call the Hugging Face API\n  // For now, we'll use our simulated analysis\n  return analyzeSentiment(text);\n}\n","size_bytes":3093},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ElderlyUserProfile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Plus, X, Save, Edit, User, Heart, Pill, AlertTriangle, Eye, Accessibility } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface Medication {\n  name: string;\n  dose: string;\n  schedule: string;\n  notes?: string;\n}\n\ninterface ElderlyUser {\n  id: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth?: string;\n  gender?: string;\n  phoneNumber?: string;\n  address?: string;\n  healthStatus?: string;\n  medicalHistory?: string;\n  diagnoses?: string[];\n  medications?: Medication[];\n  allergies?: string[];\n  sensitivities?: string[];\n  mobilityStatus?: string;\n  mobilityAids?: string[];\n  visionStatus?: string;\n  hearingStatus?: string;\n  speechStatus?: string;\n  emergencyContact?: string;\n  careInstructions?: string;\n}\n\nexport default function ElderlyUserProfile() {\n  const [match, params] = useRoute(\"/elderly-users/:id\");\n  const elderlyUserId = params?.id;\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState<Partial<ElderlyUser>>({});\n\n  // Fetch elderly user data\n  const { data: elderlyUser, isLoading } = useQuery({\n    queryKey: [`/api/elderly-users/${elderlyUserId}`],\n    enabled: !!elderlyUserId,\n  });\n\n  // Update mutation\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<ElderlyUser>) => {\n      const response = await apiRequest(\"PUT\", `/api/elderly-users/${elderlyUserId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/elderly-users/${elderlyUserId}`] });\n      toast({\n        title: \"Perfil actualizado\",\n        description: \"Los cambios se han guardado correctamente\",\n      });\n      setIsEditing(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (elderlyUser) {\n      setFormData(elderlyUser as ElderlyUser);\n    }\n  }, [elderlyUser]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateMutation.mutate(formData);\n  };\n\n  const addMedication = () => {\n    const newMedication: Medication = { name: \"\", dose: \"\", schedule: \"\", notes: \"\" };\n    setFormData(prev => ({\n      ...prev,\n      medications: [...(prev.medications || []), newMedication]\n    }));\n  };\n\n  const updateMedication = (index: number, field: keyof Medication, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      medications: prev.medications?.map((med, i) => \n        i === index ? { ...med, [field]: value } : med\n      )\n    }));\n  };\n\n  const removeMedication = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      medications: prev.medications?.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addArrayItem = (arrayName: 'diagnoses' | 'allergies' | 'sensitivities' | 'mobilityAids', value: string) => {\n    if (!value.trim()) return;\n    setFormData(prev => ({\n      ...prev,\n      [arrayName]: [...(prev[arrayName] || []), value.trim()]\n    }));\n  };\n\n  const removeArrayItem = (arrayName: 'diagnoses' | 'allergies' | 'sensitivities' | 'mobilityAids', index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      [arrayName]: prev[arrayName]?.filter((_, i) => i !== index)\n    }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!elderlyUser) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Perfil no encontrado</h2>\n            <p className=\"text-gray-600 mb-4\">No se pudo encontrar el perfil solicitado.</p>\n            <Link href=\"/\">\n              <Button>\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Volver al inicio\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Volver\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              {(elderlyUser as ElderlyUser)?.firstName} {(elderlyUser as ElderlyUser)?.lastName}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-300\">Perfil m√©dico completo</p>\n          </div>\n        </div>\n        \n        <Button\n          onClick={() => setIsEditing(!isEditing)}\n          variant={isEditing ? \"outline\" : \"default\"}\n        >\n          <Edit className=\"h-4 w-4 mr-2\" />\n          {isEditing ? \"Cancelar\" : \"Editar perfil\"}\n        </Button>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Informaci√≥n Personal */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Informaci√≥n Personal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">Nombre</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName || \"\"}\n                  onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                  disabled={!isEditing}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"lastName\">Apellidos</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName || \"\"}\n                  onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                  disabled={!isEditing}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"dateOfBirth\">Fecha de Nacimiento</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth?.split('T')[0] || \"\"}\n                  onChange={(e) => setFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                  disabled={!isEditing}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"gender\">G√©nero</Label>\n                <Select \n                  value={formData.gender || \"\"} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, gender: value }))}\n                  disabled={!isEditing}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccionar g√©nero\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Masculino</SelectItem>\n                    <SelectItem value=\"female\">Femenino</SelectItem>\n                    <SelectItem value=\"other\">Otro</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"phoneNumber\">Tel√©fono</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  value={formData.phoneNumber || \"\"}\n                  onChange={(e) => setFormData(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                  disabled={!isEditing}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"emergencyContact\">Contacto de Emergencia</Label>\n                <Input\n                  id=\"emergencyContact\"\n                  value={formData.emergencyContact || \"\"}\n                  onChange={(e) => setFormData(prev => ({ ...prev, emergencyContact: e.target.value }))}\n                  disabled={!isEditing}\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"address\">Direcci√≥n</Label>\n              <Textarea\n                id=\"address\"\n                value={formData.address || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                disabled={!isEditing}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Estado de Salud */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Heart className=\"h-5 w-5\" />\n              Estado de Salud\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"healthStatus\">Estado General de Salud</Label>\n              <Input\n                id=\"healthStatus\"\n                value={formData.healthStatus || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, healthStatus: e.target.value }))}\n                disabled={!isEditing}\n                placeholder=\"Ej: Estable, Requiere supervisi√≥n...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"medicalHistory\">Historial M√©dico</Label>\n              <Textarea\n                id=\"medicalHistory\"\n                value={formData.medicalHistory || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, medicalHistory: e.target.value }))}\n                disabled={!isEditing}\n                placeholder=\"Antecedentes m√©dicos relevantes...\"\n              />\n            </div>\n            \n            {/* Diagn√≥sticos */}\n            <div>\n              <Label>Diagn√≥sticos Relevantes</Label>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {formData.diagnoses?.map((diagnosis, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                    {diagnosis}\n                    {isEditing && (\n                      <X\n                        className=\"h-3 w-3 cursor-pointer hover:text-red-500\"\n                        onClick={() => removeArrayItem('diagnoses', index)}\n                      />\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              {isEditing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Nuevo diagn√≥stico\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        addArrayItem('diagnoses', e.currentTarget.value);\n                        e.currentTarget.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                      addArrayItem('diagnoses', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Medicaciones */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Pill className=\"h-5 w-5\" />\n              Medicaciones Actuales\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {formData.medications?.map((medication, index) => (\n              <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <h4 className=\"font-medium\">Medicaci√≥n {index + 1}</h4>\n                  {isEditing && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeMedication(index)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                  <div>\n                    <Label>Nombre</Label>\n                    <Input\n                      value={medication.name}\n                      onChange={(e) => updateMedication(index, 'name', e.target.value)}\n                      disabled={!isEditing}\n                      placeholder=\"Nombre del medicamento\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Dosis</Label>\n                    <Input\n                      value={medication.dose}\n                      onChange={(e) => updateMedication(index, 'dose', e.target.value)}\n                      disabled={!isEditing}\n                      placeholder=\"Ej: 10mg\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Horario</Label>\n                    <Input\n                      value={medication.schedule}\n                      onChange={(e) => updateMedication(index, 'schedule', e.target.value)}\n                      disabled={!isEditing}\n                      placeholder=\"Ej: Cada 8 horas\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label>Notas</Label>\n                  <Input\n                    value={medication.notes || \"\"}\n                    onChange={(e) => updateMedication(index, 'notes', e.target.value)}\n                    disabled={!isEditing}\n                    placeholder=\"Notas adicionales...\"\n                  />\n                </div>\n              </div>\n            ))}\n            \n            {isEditing && (\n              <Button type=\"button\" variant=\"outline\" onClick={addMedication}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Agregar Medicaci√≥n\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Alergias y Sensibilidades */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Alergias y Sensibilidades\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Alergias */}\n            <div>\n              <Label>Alergias</Label>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {formData.allergies?.map((allergy, index) => (\n                  <Badge key={index} variant=\"destructive\" className=\"flex items-center gap-1\">\n                    {allergy}\n                    {isEditing && (\n                      <X\n                        className=\"h-3 w-3 cursor-pointer hover:text-red-700\"\n                        onClick={() => removeArrayItem('allergies', index)}\n                      />\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              {isEditing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Nueva alergia\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        addArrayItem('allergies', e.currentTarget.value);\n                        e.currentTarget.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                      addArrayItem('allergies', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            {/* Sensibilidades */}\n            <div>\n              <Label>Sensibilidades</Label>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {formData.sensitivities?.map((sensitivity, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"flex items-center gap-1\">\n                    {sensitivity}\n                    {isEditing && (\n                      <X\n                        className=\"h-3 w-3 cursor-pointer hover:text-red-500\"\n                        onClick={() => removeArrayItem('sensitivities', index)}\n                      />\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              {isEditing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Nueva sensibilidad\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        addArrayItem('sensitivities', e.currentTarget.value);\n                        e.currentTarget.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                      addArrayItem('sensitivities', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Movilidad y Ayudas T√©cnicas */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Accessibility className=\"h-5 w-5\" />\n              Movilidad y Ayudas T√©cnicas\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"mobilityStatus\">Estado de Movilidad</Label>\n              <Select \n                value={formData.mobilityStatus || \"\"} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, mobilityStatus: value }))}\n                disabled={!isEditing}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleccionar estado de movilidad\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"independent\">Independiente</SelectItem>\n                  <SelectItem value=\"limited\">Limitada</SelectItem>\n                  <SelectItem value=\"assisted\">Con asistencia</SelectItem>\n                  <SelectItem value=\"wheelchair\">Silla de ruedas</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Ayudas T√©cnicas */}\n            <div>\n              <Label>Ayudas T√©cnicas</Label>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {formData.mobilityAids?.map((aid, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                    {aid}\n                    {isEditing && (\n                      <X\n                        className=\"h-3 w-3 cursor-pointer hover:text-red-500\"\n                        onClick={() => removeArrayItem('mobilityAids', index)}\n                      />\n                    )}\n                  </Badge>\n                ))}\n              </div>\n              {isEditing && (\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Nueva ayuda t√©cnica (andador, bast√≥n, etc.)\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        addArrayItem('mobilityAids', e.currentTarget.value);\n                        e.currentTarget.value = '';\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                      addArrayItem('mobilityAids', input.value);\n                      input.value = '';\n                    }}\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Limitaciones Sensoriales */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-5 w-5\" />\n              Limitaciones Sensoriales\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"visionStatus\">Estado de Visi√≥n</Label>\n                <Select \n                  value={formData.visionStatus || \"\"} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, visionStatus: value }))}\n                  disabled={!isEditing}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Estado de visi√≥n\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                    <SelectItem value=\"corrected\">Corregida (gafas/lentes)</SelectItem>\n                    <SelectItem value=\"limited\">Limitada</SelectItem>\n                    <SelectItem value=\"blind\">Ceguera</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"hearingStatus\">Estado de Audici√≥n</Label>\n                <Select \n                  value={formData.hearingStatus || \"\"} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, hearingStatus: value }))}\n                  disabled={!isEditing}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Estado de audici√≥n\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                    <SelectItem value=\"corrected\">Corregida (aud√≠fono)</SelectItem>\n                    <SelectItem value=\"limited\">Limitada</SelectItem>\n                    <SelectItem value=\"deaf\">Sordera</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"speechStatus\">Estado del Habla</Label>\n                <Select \n                  value={formData.speechStatus || \"\"} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, speechStatus: value }))}\n                  disabled={!isEditing}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Estado del habla\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"normal\">Normal</SelectItem>\n                    <SelectItem value=\"limited\">Limitada</SelectItem>\n                    <SelectItem value=\"non_verbal\">No verbal</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Instrucciones de Cuidado */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Instrucciones de Cuidado</CardTitle>\n            <CardDescription>\n              Instrucciones especiales, rutinas y consideraciones importantes para el cuidado\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div>\n              <Label htmlFor=\"careInstructions\">Instrucciones Especiales</Label>\n              <Textarea\n                id=\"careInstructions\"\n                value={formData.careInstructions || \"\"}\n                onChange={(e) => setFormData(prev => ({ ...prev, careInstructions: e.target.value }))}\n                disabled={!isEditing}\n                placeholder=\"Rutinas especiales, precauciones, preferencias de cuidado...\"\n                rows={4}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Botones de Acci√≥n */}\n        {isEditing && (\n          <div className=\"flex justify-end gap-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setIsEditing(false);\n                setFormData(elderlyUser as ElderlyUser);\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateMutation.isPending}\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updateMutation.isPending ? \"Guardando...\" : \"Guardar Cambios\"}\n            </Button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}","size_bytes":26581},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Plus, \n  Heart, \n  Activity,\n  AlertTriangle,\n  Clock,\n  TrendingUp,\n  Settings,\n  Bell,\n  Brain,\n  Shield,\n  Bot,\n  BarChart3,\n  MessageSquare,\n  CheckCircle,\n  XCircle,\n  Calendar\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport type { ElderlyUser, HealthAlert } from \"@shared/schema\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading, logout } = useAuth();\n  const [selectedElderlyUser, setSelectedElderlyUser] = useState<ElderlyUser | null>(null);\n  const [isAddElderlyDialogOpen, setIsAddElderlyDialogOpen] = useState(false);\n\n  const { data: elderlyUsers = [], isLoading: isLoadingElderlyUsers } = useQuery({\n    queryKey: [\"/api/elderly-users\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: alerts = [] } = useQuery({\n    queryKey: [`/api/elderly-users/${selectedElderlyUser?.id}/alerts`],\n    enabled: !!selectedElderlyUser,\n  });\n\n  const { data: stats = { totalInteractions: 0, avgMoodScore: 0, avgSentiment: 0, totalDuration: 0, alertsCount: 0 } } = useQuery({\n    queryKey: [`/api/elderly-users/${selectedElderlyUser?.id}/stats`],\n    enabled: !!selectedElderlyUser,\n  });\n\n  const { data: sentimentData = [] } = useQuery({\n    queryKey: [`/api/elderly-users/${selectedElderlyUser?.id}/sentiment-data`],\n    enabled: !!selectedElderlyUser,\n  });\n\n  const { data: interactions = [] } = useQuery({\n    queryKey: [`/api/elderly-users/${selectedElderlyUser?.id}/interactions`],\n    enabled: !!selectedElderlyUser,\n  });\n\n  const addElderlyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/elderly-users\", data);\n      return response.json();\n    },\n    onSuccess: (newUser) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/elderly-users\"] });\n      setIsAddElderlyDialogOpen(false);\n      toast({\n        title: \"Perfil creado exitosamente\",\n        description: \"Ahora puedes completar la informaci√≥n m√©dica detallada en el perfil\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el perfil\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resolveAlertMutation = useMutation({\n    mutationFn: async (alertId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/alerts/${alertId}/resolve`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/elderly-users\", selectedElderlyUser?.id, \"alerts\"] });\n      toast({\n        title: \"Alerta resuelta\",\n        description: \"La alerta ha sido marcada como resuelta\",\n      });\n    },\n  });\n\n  const handleAddElderly = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    const data = {\n      firstName: formData.get(\"firstName\"),\n      lastName: formData.get(\"lastName\"),\n      dateOfBirth: formData.get(\"dateOfBirth\"),\n      medicalConditions: formData.get(\"medicalConditions\"),\n      emergencyContact: formData.get(\"emergencyContact\"),\n    };\n\n    addElderlyMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Bot className=\"h-12 w-12 text-blue-600 animate-pulse mx-auto mb-4\" />\n          <p className=\"text-gray-600 dark:text-gray-300\">Cargando ElderCompanion...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-gray-800\">\n      {/* Navigation Header */}\n      <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 px-3 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-14 sm:h-16\">\n          <div className=\"flex items-center min-w-0\">\n            <Bot className=\"h-6 w-6 sm:h-8 sm:w-8 text-purple-600 mr-2 sm:mr-3 flex-shrink-0\" />\n            <h1 className=\"text-lg sm:text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent truncate\">\n              GaIA\n            </h1>\n            <Badge variant=\"secondary\" className=\"ml-2 sm:ml-3 text-xs hidden sm:inline-flex\">\n              {(user as any)?.role === 'family' ? 'Familiar' : (user as any)?.role === 'medical' ? 'M√©dico' : 'Cuidador'}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center\">\n            <div className=\"text-xs hidden lg:block mr-3\">\n              <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                {(user as any)?.firstName}\n              </p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={logout} className=\"text-xs px-3 py-2\">\n              Salir\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-4 sm:py-8 max-w-7xl\">\n        {/* Elderly Users Selection */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4\">\n            <div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-100\">\n                Panel de Monitoreo\n              </h2>\n\n            </div>\n            <Dialog open={isAddElderlyDialogOpen} onOpenChange={setIsAddElderlyDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"w-full sm:w-auto\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Agregar Adulto Mayor</span>\n                  <span className=\"sm:hidden\">Agregar</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"w-[95vw] max-w-sm mx-auto max-h-[85vh] overflow-y-auto p-4\">\n                <DialogHeader className=\"pb-4\">\n                  <DialogTitle className=\"text-lg\">Nuevo Perfil</DialogTitle>\n                  <DialogDescription className=\"text-sm\">\n                    Agrega un adulto mayor al sistema. Podr√°s completar la informaci√≥n m√©dica detallada despu√©s.\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleAddElderly} className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\" className=\"text-sm\">Nombre</Label>\n                      <Input id=\"firstName\" name=\"firstName\" required className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\" className=\"text-sm\">Apellido</Label>\n                      <Input id=\"lastName\" name=\"lastName\" required className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"dateOfBirth\" className=\"text-sm\">Fecha de Nacimiento</Label>\n                      <Input id=\"dateOfBirth\" name=\"dateOfBirth\" type=\"date\" required className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"medicalConditions\" className=\"text-sm\">Condiciones M√©dicas</Label>\n                      <Input id=\"medicalConditions\" name=\"medicalConditions\" placeholder=\"Diabetes, etc.\" className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"emergencyContact\" className=\"text-sm\">Contacto de Emergencia</Label>\n                      <Input id=\"emergencyContact\" name=\"emergencyContact\" placeholder=\"Tel√©fono\" className=\"mt-1\" />\n                    </div>\n                  </div>\n                  <Button type=\"submit\" disabled={addElderlyMutation.isPending} className=\"w-full mt-6\">\n                    {addElderlyMutation.isPending ? \"Creando...\" : \"Crear Perfil\"}\n                  </Button>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Elderly Users Grid */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-8\">\n            {Array.isArray(elderlyUsers) ? elderlyUsers.map((elderlyUser: ElderlyUser) => (\n              <Card \n                key={elderlyUser.id} \n                className={`cursor-pointer transition-all duration-200 ${\n                  selectedElderlyUser?.id === elderlyUser.id \n                    ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                    : 'hover:shadow-lg'\n                }`}\n                onClick={() => setSelectedElderlyUser(elderlyUser)}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Link href={`/elderly-users/${elderlyUser.id}`}>\n                      <CardTitle className=\"text-lg hover:text-purple-600 cursor-pointer transition-colors\">\n                        {elderlyUser.firstName} {elderlyUser.lastName}\n                      </CardTitle>\n                    </Link>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                      <span className=\"text-sm text-gray-500\">Activo</span>\n                    </div>\n                  </div>\n                  <CardDescription>\n                    {elderlyUser.medicalConditions || \"Sin condiciones registradas\"}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">√öltima interacci√≥n:</span>\n                    <span className=\"font-medium\">Hace 2 horas</span>\n                  </div>\n                </CardContent>\n              </Card>\n            )) : null}\n          </div>\n        </div>\n\n        {selectedElderlyUser ? (\n          <>\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-8\">\n              <Card className=\"p-3 lg:p-6\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-0\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">\n                    Interacciones\n                  </CardTitle>\n                  <MessageSquare className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"p-0 pt-2\">\n                  <div className=\"text-lg sm:text-2xl font-bold\">{(stats as any)?.totalInteractions || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +2 desde ayer\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"p-3 lg:p-6\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-0\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">\n                    √Ånimo\n                  </CardTitle>\n                  <Heart className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"p-0 pt-2\">\n                  <div className=\"text-lg sm:text-2xl font-bold\">{(stats as any)?.avgMoodScore || '--'}/10</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Promedio\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"p-3 lg:p-6\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-0\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">\n                    Alertas\n                  </CardTitle>\n                  <AlertTriangle className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"p-0 pt-2\">\n                  <div className=\"text-lg sm:text-2xl font-bold text-red-600\">{(stats as any)?.alertsCount || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Activas\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"p-3 lg:p-6\">\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 p-0\">\n                  <CardTitle className=\"text-xs sm:text-sm font-medium\">\n                    Tiempo\n                  </CardTitle>\n                  <Clock className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent className=\"p-0 pt-2\">\n                  <div className=\"text-lg sm:text-2xl font-bold\">{Math.round(((stats as any)?.totalDuration || 0) / 60)}min</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Total hoy\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Charts and Data */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-8 mb-8\">\n              {/* Sentiment Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Evoluci√≥n del Estado de √Ånimo</CardTitle>\n                  <CardDescription>√öltimos 30 d√≠as</CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-4\">\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <LineChart data={(sentimentData as any) || []}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" fontSize={12} />\n                      <YAxis domain={[0, 10]} fontSize={12} />\n                      <Tooltip />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"mood\" \n                        stroke=\"#8884d8\" \n                        strokeWidth={2}\n                        name=\"Estado de √Ånimo\"\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"sentiment\" \n                        stroke=\"#82ca9d\" \n                        strokeWidth={2}\n                        name=\"Sentimiento\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Health Alerts */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Alertas de Salud</CardTitle>\n                  <CardDescription>Notificaciones recientes</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4 max-h-80 overflow-y-auto\">\n                    {Array.isArray(alerts) ? alerts.map((alert: HealthAlert) => (\n                      <div key={alert.id} className=\"flex items-start justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Badge variant={alert.severity === 'high' ? 'destructive' : alert.severity === 'medium' ? 'default' : 'secondary'}>\n                              {alert.severity === 'high' ? 'Alta' : alert.severity === 'medium' ? 'Media' : 'Baja'}\n                            </Badge>\n                            <span className=\"text-sm text-gray-500\">\n                              {new Date(alert.createdAt!).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <h4 className=\"font-medium\">{alert.title}</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{alert.description}</p>\n                        </div>\n                        {alert.isResolved === \"false\" && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => resolveAlertMutation.mutate(alert.id)}\n                            disabled={resolveAlertMutation.isPending}\n                          >\n                            <CheckCircle className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    )) : null}\n                    {(!Array.isArray(alerts) || alerts.length === 0) && (\n                      <p className=\"text-center text-gray-500 py-8\">No hay alertas recientes</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Interactions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Interacciones Recientes</CardTitle>\n                <CardDescription>Historial de conversaciones con el robot ElderCompanion</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Array.isArray(interactions) ? interactions.map((interaction: any) => (\n                    <div key={interaction.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\">{interaction.interactionType}</Badge>\n                          <span className=\"text-sm text-gray-500\">\n                            {new Date(interaction.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {interaction.moodScore && (\n                            <Badge variant={interaction.moodScore >= 7 ? 'default' : interaction.moodScore >= 4 ? 'secondary' : 'destructive'}>\n                              √Ånimo: {interaction.moodScore}/10\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      {interaction.transcription && (\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-2\">\n                          <strong>Usuario:</strong> \"{interaction.transcription}\"\n                        </p>\n                      )}\n                      {interaction.robotResponse && (\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                          <strong>ElderCompanion:</strong> \"{interaction.robotResponse}\"\n                        </p>\n                      )}\n                      {interaction.notes && (\n                        <p className=\"text-xs text-gray-500 mt-2\">\n                          <strong>Notas:</strong> {interaction.notes}\n                        </p>\n                      )}\n                    </div>\n                  )) : null}\n                  {(!Array.isArray(interactions) || interactions.length === 0) && (\n                    <p className=\"text-center text-gray-500 py-8\">No hay interacciones registradas</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Users className=\"h-16 w-16 text-gray-400 mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2\">\n                Selecciona un Adulto Mayor\n              </h3>\n              <p className=\"text-gray-500 dark:text-gray-400 text-center max-w-md\">\n                Elige un perfil de adulto mayor para ver su informaci√≥n de monitoreo, \n                interacciones con el robot GaIA y alertas de salud.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21102},"client/src/pages/Landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { setAuthToken, clearAuthData } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Heart, Shield, Brain, Users, Bot, Activity } from \"lucide-react\";\n\nexport default function Landing() {\n  const { toast } = useToast();\n  const [isLogin, setIsLogin] = useState(true);\n\n  // Limpiar cualquier token inv√°lido al cargar la p√°gina de login\n  useEffect(() => {\n    // Verificar si hay un token inv√°lido y limpiarlo\n    const token = localStorage.getItem('eldercompanion_token');\n    if (token) {\n      // Verificar estructura b√°sica del token\n      try {\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n          console.log('Token con formato inv√°lido, limpiando');\n          localStorage.removeItem('eldercompanion_token');\n        }\n      } catch {\n        console.log('Error al verificar token, limpiando');\n        localStorage.removeItem('eldercompanion_token');\n      }\n    }\n  }, []);\n  \n  const authMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const endpoint = isLogin ? \"/api/login\" : \"/api/register\";\n      const response = await apiRequest(\"POST\", endpoint, data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAuthToken(data.token);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"¬°Bienvenido a GaIA!\",\n        description: isLogin ? \"Has iniciado sesi√≥n correctamente\" : \"Tu cuenta ha sido creada exitosamente\",\n      });\n      // Force a page reload to refresh auth state\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message.includes(\"400\") \n          ? \"El usuario ya existe o los datos son incorrectos\" \n          : \"Error al procesar la solicitud\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    const data: any = {\n      email: formData.get(\"email\"),\n      password: formData.get(\"password\"),\n    };\n\n    if (!isLogin) {\n      data.firstName = formData.get(\"firstName\");\n      data.lastName = formData.get(\"lastName\");\n      data.role = formData.get(\"role\") || \"family\";\n    }\n\n    authMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center items-center gap-3 mb-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full flex items-center justify-center\">\n              <svg viewBox=\"0 0 32 32\" className=\"w-10 h-10 fill-white\">\n                <ellipse cx=\"18\" cy=\"12\" rx=\"6\" ry=\"8\" transform=\"rotate(-15 18 12)\"/>\n                <circle cx=\"14\" cy=\"9\" r=\"3\"/>\n                <path d=\"M15 10 Q16 11 17 12\" stroke=\"white\" strokeWidth=\"1\" fill=\"none\"/>\n              </svg>\n            </div>\n            <h1 className=\"text-5xl font-bold bg-gradient-to-r from-purple-600 to-purple-800 bg-clip-text text-transparent\">\n              GaIA\n            </h1>\n          </div>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto\">\n            Sistema inteligente de monitoreo y cuidado para adultos mayores. \n            Conectando familias, profesionales m√©dicos y asistentes rob√≥ticos para un cuidado integral.\n          </p>\n          \n          {/* Features Grid */}\n          <div className=\"grid md:grid-cols-3 gap-8 mb-16 px-4 md:px-0\">\n            <div className=\"text-center\">\n              <Heart className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Cuidado Emocional</h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                An√°lisis de sentimientos y estado de √°nimo en tiempo real\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <Activity className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Monitoreo de Salud</h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Seguimiento continuo de indicadores vitales y bienestar\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <Users className=\"h-12 w-12 text-blue-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Red de Apoyo</h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Conecta familias, m√©dicos y cuidadores en una sola plataforma\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Auth Section */}\n        <div className=\"max-w-md mx-auto\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-center\">\n                {isLogin ? \"Iniciar Sesi√≥n\" : \"Crear Cuenta\"}\n              </CardTitle>\n              <CardDescription className=\"text-center\">\n                {isLogin \n                  ? \"Accede a tu panel de monitoreo GaIA\" \n                  : \"√önete a la red de cuidado inteligente\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                {!isLogin && (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"firstName\">Nombre</Label>\n                        <Input\n                          id=\"firstName\"\n                          name=\"firstName\"\n                          type=\"text\"\n                          required\n                          placeholder=\"Nombre\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"lastName\">Apellido</Label>\n                        <Input\n                          id=\"lastName\"\n                          name=\"lastName\"\n                          type=\"text\"\n                          required\n                          placeholder=\"Apellido\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"role\">Rol</Label>\n                      <select\n                        id=\"role\"\n                        name=\"role\"\n                        className=\"w-full p-2 border border-gray-300 rounded-md dark:border-gray-600 dark:bg-gray-700\"\n                        defaultValue=\"family\"\n                      >\n                        <option value=\"family\">Familiar</option>\n                        <option value=\"medical\">Profesional M√©dico</option>\n                        <option value=\"caregiver\">Cuidador</option>\n                      </select>\n                    </div>\n                  </>\n                )}\n                \n                <div>\n                  <Label htmlFor=\"email\">Correo Electr√≥nico</Label>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    required\n                    placeholder=\"tu@email.com\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"password\">Contrase√±a</Label>\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    required\n                    placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full btn-mobile\"\n                  disabled={authMutation.isPending}\n                >\n                  {authMutation.isPending \n                    ? \"Procesando...\" \n                    : (isLogin ? \"Iniciar Sesi√≥n\" : \"Crear Cuenta\")}\n                </Button>\n              </form>\n              \n              <div className=\"mt-4 text-center\">\n                <button\n                  type=\"button\"\n                  onClick={() => setIsLogin(!isLogin)}\n                  className=\"text-blue-600 hover:underline\"\n                >\n                  {isLogin \n                    ? \"¬øNo tienes cuenta? Reg√≠strate\" \n                    : \"¬øYa tienes cuenta? Inicia sesi√≥n\"}\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"mt-16 grid md:grid-cols-2 gap-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5 text-purple-600\" />\n                Inteligencia Artificial Avanzada\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Algoritmos de IA especializados en an√°lisis de comportamiento y detecci√≥n temprana \n                de cambios en el estado de salud y bienestar emocional.\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-green-600\" />\n                Seguridad y Privacidad\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Todos los datos est√°n protegidos con los m√°s altos est√°ndares de seguridad. \n                Control total sobre qui√©n puede acceder a la informaci√≥n del adulto mayor.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10616},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}